{
  "stats": {
    "suites": 3,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-10T16:41:26.363Z",
    "end": "2021-11-10T16:41:27.203Z",
    "duration": 840,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9fa742c4-de14-4221-8291-62de67386438",
      "title": "",
      "fullFile": "cypress/integration/api_usuarios.spec.js",
      "file": "cypress/integration/api_usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cae05b0c-1e16-4699-a6f6-21bf7975de03",
          "title": "Testes na rota /usuarios e validações de contrato",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b65ae06b-5b29-46a7-93da-d8914a422e76",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar um usuário corretamente, possuindo status code 200 e propriedade '_id'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve cadastrar um usuário corretamente, possuindo status code 200 e propriedade '_id'",
                  "timedOut": null,
                  "duration": 98,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioBody();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property(\"_id\");\n  cy.validarContrato(res, \"post_usuarios\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n  usuarioId = res.body._id;\n});",
                  "err": {},
                  "uuid": "d60310e3-fe91-4683-bd0c-208ae3a2c7e7",
                  "parentUUID": "b65ae06b-5b29-46a7-93da-d8914a422e76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve listar usuários cadastrados possuindo status code 200",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve listar usuários cadastrados possuindo status code 200",
                  "timedOut": null,
                  "duration": 67,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.listarUsuarios().then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_usuarios\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "3f4d1022-cbc9-42ef-87d8-b9f461f98867",
                  "parentUUID": "b65ae06b-5b29-46a7-93da-d8914a422e76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar usuário pelo ID possuindo status code 200 e propriedade 'nome' e 'email'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve buscar usuário pelo ID possuindo status code 200 e propriedade 'nome' e 'email'",
                  "timedOut": null,
                  "duration": 300,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarUsuarioId(usuarioId).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"nome\");\n  expect(res.body).to.have.property(\"email\");\n  cy.validarContrato(res, \"get_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "8b51348e-3aec-4278-828a-de4e4904412b",
                  "parentUUID": "b65ae06b-5b29-46a7-93da-d8914a422e76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar usuário possuindo status code 200 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve editar usuário possuindo status code 200 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 50,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.UsuarioEdit();\ncy.editarUsuario(usuarioId, body).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"message\").equal(\"Registro alterado com sucesso\");\n  cy.validarContrato(res, \"put_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "67d2e698-58b1-4529-976c-d4b4de67aecf",
                  "parentUUID": "b65ae06b-5b29-46a7-93da-d8914a422e76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar usuário caso o mesmo não possua cadastro possindo status code 201, propriedades 'message' e '_id'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve cadastrar usuário caso o mesmo não possua cadastro possindo status code 201, propriedades 'message' e '_id'",
                  "timedOut": null,
                  "duration": 58,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioBody();\nlet body = _factory.default.UsuarioEdit();\ncy.editarUsuario(usuario, body).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).to.have.property(\"message\").equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property(\"_id\");\n  cy.validarContrato(res, \"put_usuarios_id\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "c2c63f11-6f37-4bdd-aa70-d7fe2848270c",
                  "parentUUID": "b65ae06b-5b29-46a7-93da-d8914a422e76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir usuário possuindo status code 200 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve excluir usuário possuindo status code 200 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 57,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.excluirUsuario(usuarioId).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"message\").equal(\"Registro excluído com sucesso\");\n  cy.validarContrato(res, \"delete_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "d8e2486a-1e4c-42cb-af74-f70d40c44409",
                  "parentUUID": "b65ae06b-5b29-46a7-93da-d8914a422e76",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d60310e3-fe91-4683-bd0c-208ae3a2c7e7",
                "3f4d1022-cbc9-42ef-87d8-b9f461f98867",
                "8b51348e-3aec-4278-828a-de4e4904412b",
                "67d2e698-58b1-4529-976c-d4b4de67aecf",
                "c2c63f11-6f37-4bdd-aa70-d7fe2848270c",
                "d8e2486a-1e4c-42cb-af74-f70d40c44409"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 630,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0435101a-ffae-4e43-acf5-91afcf5efe4b",
              "title": "Deve efetuar os testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve dar erro ao tentar cadastrar usuário já cadastrado possuindo status code 400 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao tentar cadastrar usuário já cadastrado possuindo status code 400 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 55,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioExistente();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Este email já está sendo usado\");\n  cy.validarContrato(res, \"post_usuarios\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "b28ff43d-a55e-4038-a3fe-fff6b025bf90",
                  "parentUUID": "0435101a-ffae-4e43-acf5-91afcf5efe4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve dar erro ao buscar usuário por ID possuindo status code 400 epropriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao buscar usuário por ID possuindo status code 400 epropriedade 'message'",
                  "timedOut": null,
                  "duration": 71,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarUsuarioId().then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Usuário não encontrado\");\n  cy.validarContrato(res, \"get_usuarios_id\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "15a7fb61-3a0e-4160-85aa-6354e21ea829",
                  "parentUUID": "0435101a-ffae-4e43-acf5-91afcf5efe4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve dar erro ao editar usuário com email já cadastrado possuindo status code 400 e prorpiedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao editar usuário com email já cadastrado possuindo status code 400 e prorpiedade 'message'",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.UsuarioExistente();\ncy.editarUsuario(usuarioId, body).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").equal(\"Este email já está sendo usado\");\n  cy.validarContrato(res, \"put_usuarios_id\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "bcaac90d-c309-4978-9da6-7c520a9fa780",
                  "parentUUID": "0435101a-ffae-4e43-acf5-91afcf5efe4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b28ff43d-a55e-4038-a3fe-fff6b025bf90",
                "15a7fb61-3a0e-4160-85aa-6354e21ea829",
                "bcaac90d-c309-4978-9da6-7c520a9fa780"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 175,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "yyyymmdd_HHMMss",
        "reportTitle": "Relatório dos testes",
        "cdn": true,
        "charts": true
      },
      "version": "6.0.1"
    }
  }
}