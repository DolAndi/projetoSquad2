{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 6,
    "pending": 0,
    "failures": 1,
    "start": "2021-11-08T18:15:37.314Z",
    "end": "2021-11-08T18:15:38.184Z",
    "duration": 870,
    "testsRegistered": 7,
    "passPercent": 85.71428571428571,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "aa2bfe9c-13c1-4da8-969b-3a20f6a1b85f",
      "title": "",
      "fullFile": "cypress/integration/api_usuarios.spec.js",
      "file": "cypress/integration/api_usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
          "title": "Testes na rota /usuarios e validações de contrato",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve cadastrar um usuário corretamente",
              "fullTitle": "Testes na rota /usuarios e validações de contrato Deve cadastrar um usuário corretamente",
              "timedOut": null,
              "duration": 87,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = _factory.default.UsuarioBody();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).to.have.property('message').to.be.equal('Cadastro realizado com sucesso');\n  expect(res.body).to.have.property('_id');\n  cy.validarContrato(res, \"post_usuarios\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n  usuarioId = res.body._id;\n});",
              "err": {},
              "uuid": "6167e3af-5b47-43b6-876a-1fd8a0a7f4da",
              "parentUUID": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve dar erro ao cadastrar usuário já cadastrado",
              "fullTitle": "Testes na rota /usuarios e validações de contrato Deve dar erro ao cadastrar usuário já cadastrado",
              "timedOut": null,
              "duration": 50,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = _factory.default.UsuarioExistente();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property('message').to.be.equal('Este email já está sendo usado');\n  cy.validarContrato(res, \"post_usuarios\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {},
              "uuid": "3edc2dc4-c2d5-4310-8e0c-e0dae7063907",
              "parentUUID": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes na rota /usuarios e validações de contrato Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 315,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.listarUsuarios().then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_usuarios\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {},
              "uuid": "1085def4-c480-447d-a74c-3bde39c531db",
              "parentUUID": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar usuário pelo ID",
              "fullTitle": "Testes na rota /usuarios e validações de contrato Deve buscar usuário pelo ID",
              "timedOut": null,
              "duration": 49,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarUsuarioId(usuarioId).then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {},
              "uuid": "d8b5aa17-63bd-4c7f-9db5-ec8de001ad3a",
              "parentUUID": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve dar erro ao buscar usuário por ID",
              "fullTitle": "Testes na rota /usuarios e validações de contrato Deve dar erro ao buscar usuário por ID",
              "timedOut": null,
              "duration": 51,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarUsuarioId().then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property('message').to.be.equal('Usuário não encontrado');\n  cy.validarContrato(res, \"get_usuarios_id\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {},
              "uuid": "1559cd02-d79d-4328-bdc4-96f8c32e598e",
              "parentUUID": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve excluir usuário",
              "fullTitle": "Testes na rota /usuarios e validações de contrato Deve excluir usuário",
              "timedOut": null,
              "duration": 61,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirUsuario(usuarioId).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property('message').equal('Registro excluído com sucesso');\n  cy.validarContrato(res, \"delete_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {},
              "uuid": "4befbaa7-2dea-4915-9e05-1a64fa58e89c",
              "parentUUID": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve dar erro excluir usuário com carrinho cadastrado",
              "fullTitle": "Testes na rota /usuarios e validações de contrato Deve dar erro excluir usuário com carrinho cadastrado",
              "timedOut": null,
              "duration": 189,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.excluirUsuario().then(res => {\n  expect(res.status).to.be.equal(400); //criar usuario com carrinho cadastrado\n  expect(res.body).to.have.property('message').equal('Não é permitido excluir usuário com carrinho cadastrado');\n  expect(res.body).to.have.property('idCarrinho');\n  cy.validarContrato(res, \"delete_usuarios_id\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (http://localhost:56934/__cypress/tests?p=cypress\\integration\\api_usuarios.spec.js:290:32)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "56cbecdd-8f72-430c-9f16-208711be40ca",
              "parentUUID": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6167e3af-5b47-43b6-876a-1fd8a0a7f4da",
            "3edc2dc4-c2d5-4310-8e0c-e0dae7063907",
            "1085def4-c480-447d-a74c-3bde39c531db",
            "d8b5aa17-63bd-4c7f-9db5-ec8de001ad3a",
            "1559cd02-d79d-4328-bdc4-96f8c32e598e",
            "4befbaa7-2dea-4915-9e05-1a64fa58e89c"
          ],
          "failures": [
            "56cbecdd-8f72-430c-9f16-208711be40ca"
          ],
          "pending": [],
          "skipped": [],
          "duration": 802,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "yyyymmdd_HHMMss",
        "reportTitle": "Relatório dos testes",
        "cdn": true,
        "charts": true
      },
      "version": "6.0.1"
    }
  }
}