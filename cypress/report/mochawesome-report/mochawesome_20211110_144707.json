{
  "stats": {
    "suites": 3,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-10T17:47:07.343Z",
    "end": "2021-11-10T17:47:07.888Z",
    "duration": 545,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "23592849-2820-4037-8fe3-05a101a8c40b",
      "title": "",
      "fullFile": "cypress/integration/api_usuarios.spec.js",
      "file": "cypress/integration/api_usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b876b0b4-6504-4b9c-a426-a2656cd8d18c",
          "title": "Testes na rota /usuarios e validações de contrato",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e864c6b2-9ab8-47b1-8f58-e91b6d947477",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar um usuário corretamente, possuindo status code 200 e propriedade '_id'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve cadastrar um usuário corretamente, possuindo status code 200 e propriedade '_id'",
                  "timedOut": null,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioBody();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property(\"_id\");\n  cy.validarContrato(res, \"post_usuarios\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n  usuarioId = res.body._id;\n});",
                  "err": {},
                  "uuid": "fa2a9c4e-a511-4db9-aaea-14225aec675d",
                  "parentUUID": "e864c6b2-9ab8-47b1-8f58-e91b6d947477",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve listar usuários cadastrados possuindo status code 200",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve listar usuários cadastrados possuindo status code 200",
                  "timedOut": null,
                  "duration": 58,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.listarUsuarios().then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_usuarios\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "0b05d228-8616-4733-aeb6-3af4ab2b36d1",
                  "parentUUID": "e864c6b2-9ab8-47b1-8f58-e91b6d947477",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar usuário pelo ID possuindo status code 200 e propriedade 'nome' e 'email'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve buscar usuário pelo ID possuindo status code 200 e propriedade 'nome' e 'email'",
                  "timedOut": null,
                  "duration": 52,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarUsuarioId(usuarioId).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"nome\");\n  expect(res.body).to.have.property(\"email\");\n  cy.validarContrato(res, \"get_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "2fd672ec-7620-4078-a9d6-9ae4e9106fea",
                  "parentUUID": "e864c6b2-9ab8-47b1-8f58-e91b6d947477",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar usuário possuindo status code 200 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve editar usuário possuindo status code 200 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 51,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.UsuarioEdit();\ncy.editarUsuario(usuarioId, body).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"message\").equal(\"Registro alterado com sucesso\");\n  cy.validarContrato(res, \"put_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "6862be62-bca8-451a-a513-2c98efa4a618",
                  "parentUUID": "e864c6b2-9ab8-47b1-8f58-e91b6d947477",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar usuário caso o mesmo não possua cadastro possindo status code 201, propriedades 'message' e '_id'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve cadastrar usuário caso o mesmo não possua cadastro possindo status code 201, propriedades 'message' e '_id'",
                  "timedOut": null,
                  "duration": 48,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioBody();\nlet body = _factory.default.UsuarioEdit();\ncy.editarUsuario(usuario, body).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).to.have.property(\"message\").equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property(\"_id\");\n  cy.validarContrato(res, \"put_usuarios_id\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "d80dd7b9-77b2-43ec-8f83-110ffed99ea5",
                  "parentUUID": "e864c6b2-9ab8-47b1-8f58-e91b6d947477",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir usuário possuindo status code 200 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve excluir usuário possuindo status code 200 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 52,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.excluirUsuario(usuarioId).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"message\").equal(\"Registro excluído com sucesso\");\n  cy.validarContrato(res, \"delete_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "bc6970e3-808d-4599-b526-e8894cfb7eb5",
                  "parentUUID": "e864c6b2-9ab8-47b1-8f58-e91b6d947477",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa2a9c4e-a511-4db9-aaea-14225aec675d",
                "0b05d228-8616-4733-aeb6-3af4ab2b36d1",
                "2fd672ec-7620-4078-a9d6-9ae4e9106fea",
                "6862be62-bca8-451a-a513-2c98efa4a618",
                "d80dd7b9-77b2-43ec-8f83-110ffed99ea5",
                "bc6970e3-808d-4599-b526-e8894cfb7eb5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 345,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "96dc06b3-01b1-4b4b-9ff6-9a79692fbf7c",
              "title": "Deve efetuar os testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve dar erro ao tentar cadastrar usuário já cadastrado possuindo status code 400 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao tentar cadastrar usuário já cadastrado possuindo status code 400 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 56,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioExistente();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Este email já está sendo usado\");\n  cy.validarContrato(res, \"post_usuarios\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "52557f93-106e-43a2-a98f-9a94b0f1dda1",
                  "parentUUID": "96dc06b3-01b1-4b4b-9ff6-9a79692fbf7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve dar erro ao buscar usuário por ID possuindo status code 400 epropriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao buscar usuário por ID possuindo status code 400 epropriedade 'message'",
                  "timedOut": null,
                  "duration": 50,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarUsuarioId().then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Usuário não encontrado\");\n  cy.validarContrato(res, \"get_usuarios_id\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "1e8909a6-e669-41e4-87ff-33dc9916dff2",
                  "parentUUID": "96dc06b3-01b1-4b4b-9ff6-9a79692fbf7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve dar erro ao editar usuário com email já cadastrado possuindo status code 400 e prorpiedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao editar usuário com email já cadastrado possuindo status code 400 e prorpiedade 'message'",
                  "timedOut": null,
                  "duration": 54,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.UsuarioExistente();\ncy.editarUsuario(usuarioId, body).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").equal(\"Este email já está sendo usado\");\n  cy.validarContrato(res, \"put_usuarios_id\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "68d33bd8-59fb-4250-83b5-b57cbe075f96",
                  "parentUUID": "96dc06b3-01b1-4b4b-9ff6-9a79692fbf7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52557f93-106e-43a2-a98f-9a94b0f1dda1",
                "1e8909a6-e669-41e4-87ff-33dc9916dff2",
                "68d33bd8-59fb-4250-83b5-b57cbe075f96"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 160,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "yyyymmdd_HHMMss",
        "reportTitle": "Relatório dos testes",
        "cdn": true,
        "charts": true
      },
      "version": "6.0.1"
    }
  }
}