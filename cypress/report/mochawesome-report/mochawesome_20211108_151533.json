{
  "stats": {
    "suites": 4,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-08T18:15:33.082Z",
    "end": "2021-11-08T18:15:33.905Z",
    "duration": 823,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "471b8822-6785-4c88-8aed-fcf56c9a1119",
      "title": "",
      "fullFile": "cypress/integration/api_produtos.spec.js",
      "file": "cypress/integration/api_produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b9dbe16c-eb4b-4652-9361-2008ca1ad062",
          "title": "Teste da rota /login para execução posterior da rota /produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar o login com status code 200 e authorization",
              "fullTitle": "Teste da rota /login para execução posterior da rota /produtos Deve validar o login com status code 200 e authorization",
              "timedOut": null,
              "duration": 97,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n    bearer = res.body.authorization;\n  });\n});",
              "err": {},
              "uuid": "5cb29a6c-6eb7-455b-9f8d-8e1496e1d281",
              "parentUUID": "b9dbe16c-eb4b-4652-9361-2008ca1ad062",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5cb29a6c-6eb7-455b-9f8d-8e1496e1d281"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 97,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f392f7b3-e114-43fa-abd3-57a1944ac6cd",
          "title": "Testes da rota /produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d6532691-6760-4353-9a60-5a7b0065d058",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar produto corretamente possuindo status code 201 e exibir propriedade message",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve cadastrar produto corretamente possuindo status code 201 e exibir propriedade message",
                  "timedOut": null,
                  "duration": 79,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).has.property(\"message\").equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property('_id');\n  idProduto = res.body._id;\n});",
                  "err": {},
                  "uuid": "9376c2ca-8cf0-414c-8f00-20fd9039d93c",
                  "parentUUID": "d6532691-6760-4353-9a60-5a7b0065d058",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produtos e se possui status code 200",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve buscar produtos e se possui status code 200",
                  "timedOut": null,
                  "duration": 98,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutos().then(res => {\n  expect(res.status).to.equal(200);\n});",
                  "err": {},
                  "uuid": "d0ead3f5-d1b7-44d0-a68c-2801189cbe2a",
                  "parentUUID": "d6532691-6760-4353-9a60-5a7b0065d058",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produto por id e se possui status code 200",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve buscar produto por id e se possui status code 200",
                  "timedOut": null,
                  "duration": 43,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutoPorId(idProduto).then(res => {\n  expect(res.status).to.be.equal(200);\n});",
                  "err": {},
                  "uuid": "ebf0c5f3-55a4-424d-84f7-7a88ab49d542",
                  "parentUUID": "d6532691-6760-4353-9a60-5a7b0065d058",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato sobre a requisição GET /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar contrato sobre a requisição GET /produtos",
                  "timedOut": null,
                  "duration": 82,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutos().then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_produtos\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "77d04ea5-4a72-4042-877b-8436fd2c27d6",
                  "parentUUID": "d6532691-6760-4353-9a60-5a7b0065d058",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato sobre a requisição POST /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar contrato sobre a requisição POST /produtos",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\nlet produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  expect(res.status).to.be.equal(201);\n  cy.validarContrato(res, \"post_produtos\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "72ba5844-1510-4d68-a426-5dd9623ef75b",
                  "parentUUID": "d6532691-6760-4353-9a60-5a7b0065d058",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9376c2ca-8cf0-414c-8f00-20fd9039d93c",
                "d0ead3f5-d1b7-44d0-a68c-2801189cbe2a",
                "ebf0c5f3-55a4-424d-84f7-7a88ab49d542",
                "77d04ea5-4a72-4042-877b-8436fd2c27d6",
                "72ba5844-1510-4d68-a426-5dd9623ef75b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 351,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8586e640-9e98-48d4-87c2-2a590e42781c",
              "title": "Deve efetuar os testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve falhar o cadastro do produto por ser existente, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por ser existente, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 44,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produtoExistente).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"message\").equal(\"Já existe produto com esse nome\");\n});",
                  "err": {},
                  "uuid": "477c9f73-bb9a-4684-93c9-c8247b256872",
                  "parentUUID": "8586e640-9e98-48d4-87c2-2a590e42781c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 52,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemNome = _factory.default.produtoNomeBranco();\ncy.cadastrarProduto(bearer, produtoSemNome).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"nome\").equal(\"nome não pode ficar em branco\");\n});",
                  "err": {},
                  "uuid": "c08d37d8-0e53-499b-a778-1c63558e669d",
                  "parentUUID": "8586e640-9e98-48d4-87c2-2a590e42781c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir descrição, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir descrição, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 47,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemDescricao = _factory.default.produtoSemDescricao();\ncy.cadastrarProduto(bearer, produtoSemDescricao).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"descricao\").equal(\"descricao não pode ficar em branco\");\n});",
                  "err": {},
                  "uuid": "453da96c-1885-4e5d-8bcc-391d1ff8e330",
                  "parentUUID": "8586e640-9e98-48d4-87c2-2a590e42781c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 44,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemNome = _factory.default.produtoSemNome();\ncy.cadastrarProduto(bearer, produtoSemNome).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"nome\").equal(\"nome é obrigatório\");\n});",
                  "err": {},
                  "uuid": "5587706d-6099-41bb-a81b-8119af50ac0e",
                  "parentUUID": "8586e640-9e98-48d4-87c2-2a590e42781c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato negativo sobre a requisição POST /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve validar contrato negativo sobre a requisição POST /produtos",
                  "timedOut": null,
                  "duration": 50,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\nlet produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produtoExistente).then(res => {\n  expect(res.status).to.be.equal(400);\n  cy.validarContrato(res, \"post_produtos\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "5728f5f6-67bf-45b7-9e1c-c7bd87d062df",
                  "parentUUID": "8586e640-9e98-48d4-87c2-2a590e42781c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar teste de inserção de Token inválido",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve realizar teste de inserção de Token inválido",
                  "timedOut": null,
                  "duration": 93,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.invalido).then(res => {\n    bearer = res.body.authorization;\n    cy.cadastrarProduto(bearer, produto).then(res => {\n      expect(res.statusCode === 401);\n      expect(res.body).to.have.property(\"message\");\n      expect(res.body.message).to.be.equal(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\n      cy.validarContrato(res, \"post_produtos\", 401).then(validacao => {\n        expect(validacao).to.be.equal(\"Contrato validado!\");\n      });\n    });\n  });\n});",
                  "err": {},
                  "uuid": "7893bdce-4cee-4583-a0ed-ecd590441302",
                  "parentUUID": "8586e640-9e98-48d4-87c2-2a590e42781c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "477c9f73-bb9a-4684-93c9-c8247b256872",
                "c08d37d8-0e53-499b-a778-1c63558e669d",
                "453da96c-1885-4e5d-8bcc-391d1ff8e330",
                "5587706d-6099-41bb-a81b-8119af50ac0e",
                "5728f5f6-67bf-45b7-9e1c-c7bd87d062df",
                "7893bdce-4cee-4583-a0ed-ecd590441302"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 330,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "yyyymmdd_HHMMss",
        "reportTitle": "Relatório dos testes",
        "cdn": true,
        "charts": true
      },
      "version": "6.0.1"
    }
  }
}