{
  "stats": {
    "suites": 3,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-10T16:41:22.211Z",
    "end": "2021-11-10T16:41:23.048Z",
    "duration": 837,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0ce4058c-a769-4e64-951b-639c7738365a",
      "title": "",
      "fullFile": "cypress/integration/api_produtos.spec.js",
      "file": "cypress/integration/api_produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f41bae16-db84-4c04-8feb-362effc1a220",
          "title": "Testes da rota /produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve validar o login com status code 200 e authorization",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar o login com status code 200 e authorization",
                  "timedOut": null,
                  "duration": 70,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n    bearer = res.body.authorization;\n  });\n});",
                  "err": {},
                  "uuid": "7bf0b4d9-af7d-4985-b153-993f58b6139b",
                  "parentUUID": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar produto corretamente possuindo status code 201 e exibir propriedade message",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve cadastrar produto corretamente possuindo status code 201 e exibir propriedade message",
                  "timedOut": null,
                  "duration": 79,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).has.property(\"message\").equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property('_id');\n  idProduto = res.body._id;\n});",
                  "err": {},
                  "uuid": "a243ca06-b06e-4fc0-8c0c-25a70cbc5394",
                  "parentUUID": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produtos e se possui status code 200",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve buscar produtos e se possui status code 200",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutos().then(res => {\n  expect(res.status).to.equal(200);\n});",
                  "err": {},
                  "uuid": "43ccec1a-82f4-4110-afac-17e10d74e021",
                  "parentUUID": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produto por id e se possui status code 200",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve buscar produto por id e se possui status code 200",
                  "timedOut": null,
                  "duration": 43,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutoPorId(idProduto).then(res => {\n  expect(res.status).to.be.equal(200);\n});",
                  "err": {},
                  "uuid": "246b30b5-d343-4ce5-bc78-ed40398f4105",
                  "parentUUID": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato sobre a requisição GET /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar contrato sobre a requisição GET /produtos",
                  "timedOut": null,
                  "duration": 91,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutos().then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_produtos\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "27fd73f7-84ad-493b-a070-476e3519e6fe",
                  "parentUUID": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato sobre a requisição POST /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar contrato sobre a requisição POST /produtos",
                  "timedOut": null,
                  "duration": 59,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\nlet produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  expect(res.status).to.be.equal(201);\n  cy.validarContrato(res, \"post_produtos\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "217ea31c-e607-4cfd-8e3b-ba1c6f99bb9a",
                  "parentUUID": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar o produto PUT /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve editar o produto PUT /produtos",
                  "timedOut": null,
                  "duration": 54,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.produtoEdit();\ncy.editarProduto(idProduto, body, bearer).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property('message').equal('Registro alterado com sucesso');\n  cy.validarContrato(res, \"put_produtos_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "2595727d-6b73-446e-aa9f-ea408a094043",
                  "parentUUID": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7bf0b4d9-af7d-4985-b153-993f58b6139b",
                "a243ca06-b06e-4fc0-8c0c-25a70cbc5394",
                "43ccec1a-82f4-4110-afac-17e10d74e021",
                "246b30b5-d343-4ce5-bc78-ed40398f4105",
                "27fd73f7-84ad-493b-a070-476e3519e6fe",
                "217ea31c-e607-4cfd-8e3b-ba1c6f99bb9a",
                "2595727d-6b73-446e-aa9f-ea408a094043"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 445,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca8b9028-3d0d-41ae-856d-53d300c82646",
              "title": "Deve efetuar os testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve falhar o cadastro do produto por ser existente, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por ser existente, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 50,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produtoExistente).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"message\").equal(\"Já existe produto com esse nome\");\n});",
                  "err": {},
                  "uuid": "b5f4f8d6-893d-48ac-bd06-e7905c6a8108",
                  "parentUUID": "ca8b9028-3d0d-41ae-856d-53d300c82646",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemNome = _factory.default.produtoNomeBranco();\ncy.cadastrarProduto(bearer, produtoSemNome).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"nome\").equal(\"nome não pode ficar em branco\");\n});",
                  "err": {},
                  "uuid": "39e795b9-3aac-4d5a-aaea-23a01ee1407f",
                  "parentUUID": "ca8b9028-3d0d-41ae-856d-53d300c82646",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir descrição, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir descrição, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 51,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemDescricao = _factory.default.produtoSemDescricao();\ncy.cadastrarProduto(bearer, produtoSemDescricao).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"descricao\").equal(\"descricao não pode ficar em branco\");\n});",
                  "err": {},
                  "uuid": "b2a81ae0-7fcc-4057-b305-19059e29c67f",
                  "parentUUID": "ca8b9028-3d0d-41ae-856d-53d300c82646",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 43,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemNome = _factory.default.produtoSemNome();\ncy.cadastrarProduto(bearer, produtoSemNome).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"nome\").equal(\"nome é obrigatório\");\n});",
                  "err": {},
                  "uuid": "cc2c2cb9-b899-4f4f-b4ad-abd7460f920f",
                  "parentUUID": "ca8b9028-3d0d-41ae-856d-53d300c82646",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato negativo sobre a requisição POST /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve validar contrato negativo sobre a requisição POST /produtos",
                  "timedOut": null,
                  "duration": 55,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\nlet produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produtoExistente).then(res => {\n  expect(res.status).to.be.equal(400);\n  cy.validarContrato(res, \"post_produtos\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "587d0eb9-345f-46ba-8059-d39317887c44",
                  "parentUUID": "ca8b9028-3d0d-41ae-856d-53d300c82646",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar teste de inserção de Token inválido",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve realizar teste de inserção de Token inválido",
                  "timedOut": null,
                  "duration": 90,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.invalido).then(res => {\n    bearer = res.body.authorization;\n    cy.cadastrarProduto(bearer, produto).then(res => {\n      expect(res.statusCode === 401);\n      expect(res.body).to.have.property(\"message\");\n      expect(res.body.message).to.be.equal(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\n      cy.validarContrato(res, \"post_produtos\", 401).then(validacao => {\n        expect(validacao).to.be.equal(\"Contrato validado!\");\n      });\n    });\n  });\n});",
                  "err": {},
                  "uuid": "fdf5b0ef-bea4-4172-b279-b7271802be11",
                  "parentUUID": "ca8b9028-3d0d-41ae-856d-53d300c82646",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5f4f8d6-893d-48ac-bd06-e7905c6a8108",
                "39e795b9-3aac-4d5a-aaea-23a01ee1407f",
                "b2a81ae0-7fcc-4057-b305-19059e29c67f",
                "cc2c2cb9-b899-4f4f-b4ad-abd7460f920f",
                "587d0eb9-345f-46ba-8059-d39317887c44",
                "fdf5b0ef-bea4-4172-b279-b7271802be11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 338,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "yyyymmdd_HHMMss",
        "reportTitle": "Relatório dos testes",
        "cdn": true,
        "charts": true
      },
      "version": "6.0.1"
    }
  }
}