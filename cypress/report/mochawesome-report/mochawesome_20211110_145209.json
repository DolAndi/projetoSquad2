{
  "stats": {
    "suites": 3,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-10T17:52:07.988Z",
    "end": "2021-11-10T17:52:09.120Z",
    "duration": 1132,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "643d908d-3a9c-4ee8-b40a-708bbfb8d28b",
      "title": "",
      "fullFile": "cypress/integration/api_produtos.spec.js",
      "file": "cypress/integration/api_produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "43bc205c-38ec-40b3-8544-3d505df7e969",
          "title": "Testes da rota /produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve validar o login com status code 200 e authorization",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar o login com status code 200 e authorization",
                  "timedOut": null,
                  "duration": 72,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n    bearer = res.body.authorization;\n  });\n});",
                  "err": {},
                  "uuid": "7ec75a9d-6bfd-4059-bcfd-da165e1a3851",
                  "parentUUID": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar produto corretamente possuindo status code 201 e exibir propriedade message",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve cadastrar produto corretamente possuindo status code 201 e exibir propriedade message",
                  "timedOut": null,
                  "duration": 57,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).has.property(\"message\").equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property(\"_id\");\n  idProduto = res.body._id;\n});",
                  "err": {},
                  "uuid": "86af2a40-f2ad-437d-9fa0-d81f906a5c59",
                  "parentUUID": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produtos e se possui status code 200",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve buscar produtos e se possui status code 200",
                  "timedOut": null,
                  "duration": 101,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutos().then(res => {\n  expect(res.status).to.equal(200);\n});",
                  "err": {},
                  "uuid": "cf1aaa26-caa0-4bbf-8c1f-b4bdf42d7ff6",
                  "parentUUID": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produto por id e se possui status code 200",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve buscar produto por id e se possui status code 200",
                  "timedOut": null,
                  "duration": 60,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutoPorId(idProduto).then(res => {\n  expect(res.status).to.be.equal(200);\n});",
                  "err": {},
                  "uuid": "e9e70ef5-2d31-4ab4-af4e-c810c9436784",
                  "parentUUID": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato sobre a requisição GET /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar contrato sobre a requisição GET /produtos",
                  "timedOut": null,
                  "duration": 103,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutos().then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_produtos\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "6e66e2df-125c-4e3f-a0a2-fd51a52d3037",
                  "parentUUID": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato sobre a requisição POST /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar contrato sobre a requisição POST /produtos",
                  "timedOut": null,
                  "duration": 48,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  expect(res.status).to.be.equal(201);\n  cy.validarContrato(res, \"post_produtos\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "719de420-42b0-4f8e-93b2-c167d4466c83",
                  "parentUUID": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar o produto PUT /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve editar o produto PUT /produtos",
                  "timedOut": null,
                  "duration": 47,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.produtoEdit();\ncy.editarProduto(idProduto, body, bearer).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property('message').equal('Registro alterado com sucesso');\n  cy.validarContrato(res, \"put_produtos_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "38b50f02-d743-4130-b3c1-515ba0d64333",
                  "parentUUID": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ec75a9d-6bfd-4059-bcfd-da165e1a3851",
                "86af2a40-f2ad-437d-9fa0-d81f906a5c59",
                "cf1aaa26-caa0-4bbf-8c1f-b4bdf42d7ff6",
                "e9e70ef5-2d31-4ab4-af4e-c810c9436784",
                "6e66e2df-125c-4e3f-a0a2-fd51a52d3037",
                "719de420-42b0-4f8e-93b2-c167d4466c83",
                "38b50f02-d743-4130-b3c1-515ba0d64333"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 488,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33e86e4b-45ef-4497-8f07-767373771469",
              "title": "Deve efetuar os testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve falhar o cadastro do produto por ser existente, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por ser existente, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 291,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produtoExistente).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"message\").equal(\"Já existe produto com esse nome\");\n});",
                  "err": {},
                  "uuid": "81896102-107c-4aa4-8269-d2c990dee8e8",
                  "parentUUID": "33e86e4b-45ef-4497-8f07-767373771469",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 43,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemNome = _factory.default.produtoNomeBranco();\ncy.cadastrarProduto(bearer, produtoSemNome).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"nome\").equal(\"nome não pode ficar em branco\");\n});",
                  "err": {},
                  "uuid": "9cde4f6e-8ca5-49f1-ac9b-3659f184b881",
                  "parentUUID": "33e86e4b-45ef-4497-8f07-767373771469",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir descrição, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir descrição, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 51,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemDescricao = _factory.default.produtoSemDescricao();\ncy.cadastrarProduto(bearer, produtoSemDescricao).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"descricao\").equal(\"descricao não pode ficar em branco\");\n});",
                  "err": {},
                  "uuid": "a82613ab-d760-4e24-8f94-c25606a0808c",
                  "parentUUID": "33e86e4b-45ef-4497-8f07-767373771469",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemNome = _factory.default.produtoSemNome();\ncy.cadastrarProduto(bearer, produtoSemNome).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"nome\").equal(\"nome é obrigatório\");\n});",
                  "err": {},
                  "uuid": "e43b5ded-1596-4911-9c79-5fe231a08969",
                  "parentUUID": "33e86e4b-45ef-4497-8f07-767373771469",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato negativo sobre a requisição POST /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve validar contrato negativo sobre a requisição POST /produtos",
                  "timedOut": null,
                  "duration": 53,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produtoExistente).then(res => {\n  expect(res.status).to.be.equal(400);\n  cy.validarContrato(res, \"post_produtos\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "487b3cee-1675-4af5-92ed-5df27f028849",
                  "parentUUID": "33e86e4b-45ef-4497-8f07-767373771469",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar teste de inserção de Token inválido",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve realizar teste de inserção de Token inválido",
                  "timedOut": null,
                  "duration": 87,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.invalido).then(res => {\n    bearer = res.body.authorization;\n    cy.cadastrarProduto(bearer, produto).then(res => {\n      expect(res.statusCode === 401);\n      expect(res.body).to.have.property(\"message\");\n      expect(res.body.message).to.be.equal(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\n      cy.validarContrato(res, \"post_produtos\", 401).then(validacao => {\n        expect(validacao).to.be.equal(\"Contrato validado!\");\n      });\n    });\n  });\n});",
                  "err": {},
                  "uuid": "c4f4ef05-07fb-4a5f-89ab-c7a0f1bf1f23",
                  "parentUUID": "33e86e4b-45ef-4497-8f07-767373771469",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81896102-107c-4aa4-8269-d2c990dee8e8",
                "9cde4f6e-8ca5-49f1-ac9b-3659f184b881",
                "a82613ab-d760-4e24-8f94-c25606a0808c",
                "e43b5ded-1596-4911-9c79-5fe231a08969",
                "487b3cee-1675-4af5-92ed-5df27f028849",
                "c4f4ef05-07fb-4a5f-89ab-c7a0f1bf1f23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 574,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "yyyymmdd_HHMMss",
        "reportTitle": "Relatório dos testes",
        "cdn": true,
        "charts": true
      },
      "version": "6.0.1"
    }
  }
}