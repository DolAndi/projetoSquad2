{
  "stats": {
    "suites": 9,
    "tests": 42,
    "passes": 42,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-10T17:52:00.071Z",
    "end": "2021-11-10T17:53:22.534Z",
    "duration": 40311,
    "testsRegistered": 42,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e3372991-0805-4afd-b7bf-e2dc1786dd41",
      "title": "",
      "fullFile": "cypress/integration/api_carrinho.spec.js",
      "file": "cypress/integration/api_carrinho.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7c2c527b-55c0-40bf-85e5-948deddbeeae",
          "title": "Teste da rota /login para execução posterior da rota /carrinhos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar o login com status code 200 e authorization",
              "fullTitle": "Teste da rota /login para execução posterior da rota /carrinhos Deve validar o login com status code 200 e authorization",
              "timedOut": null,
              "duration": 230,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n  });\n});",
              "err": {},
              "uuid": "11e6631f-2ef0-4bb5-ab19-903b41ae7ed2",
              "parentUUID": "7c2c527b-55c0-40bf-85e5-948deddbeeae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "11e6631f-2ef0-4bb5-ab19-903b41ae7ed2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 230,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d523ca5e-eb5a-44ba-91ff-515e8653b63c",
          "title": "Testes na rota /carrinhos e validações de contrato",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve listar carrinhos cadastrados possuindo statys code 200 e propriedade 'quantidade' e 'carrinhos'",
              "fullTitle": "Testes na rota /carrinhos e validações de contrato Deve listar carrinhos cadastrados possuindo statys code 200 e propriedade 'quantidade' e 'carrinhos'",
              "timedOut": null,
              "duration": 47,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.listarCarrinhos().then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"quantidade\");\n  expect(res.body).to.have.property(\"carrinhos\"); //cy.validarContrato(res, \"get_carrinhos\", 200).then(validacao =>{\n  // expect(validacao).to.be.equal(\"Contrato validado!\")\n  // }) \n});",
              "err": {},
              "uuid": "17a1de9d-16a4-4778-8058-1c9e16d554b9",
              "parentUUID": "d523ca5e-eb5a-44ba-91ff-515e8653b63c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17a1de9d-16a4-4778-8058-1c9e16d554b9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 47,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "75e79727-42b5-4ae3-8b7a-c61e4566193d",
      "title": "",
      "fullFile": "cypress/integration/api_login.spec.js",
      "file": "cypress/integration/api_login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "db9ab281-c29e-490f-a2b5-36b065071ea6",
          "title": "Testes da rota /login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "37cbe126-1307-453e-8b05-10cb57343057",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve validar o login com status code 200 e authorization",
                  "fullTitle": "Testes da rota /login Deve efetuar os testes positivos da rota Deve validar o login com status code 200 e authorization",
                  "timedOut": null,
                  "duration": 59,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n    bearer = res.body.authorization;\n  });\n});",
                  "err": {},
                  "uuid": "76595605-278e-4d62-9488-444c4e898f79",
                  "parentUUID": "37cbe126-1307-453e-8b05-10cb57343057",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar teste de contrato sobre a requisição POST /login",
                  "fullTitle": "Testes da rota /login Deve efetuar os testes positivos da rota Deve realizar teste de contrato sobre a requisição POST /login",
                  "timedOut": null,
                  "duration": 68,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.be.equal(200);\n    cy.validarContrato(res, \"post_login\", 200).then(validacao => {\n      expect(validacao).to.be.equal(\"Contrato validado!\");\n    });\n  });\n});",
                  "err": {},
                  "uuid": "7cde582d-1b58-4064-b922-c2cab21cb788",
                  "parentUUID": "37cbe126-1307-453e-8b05-10cb57343057",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76595605-278e-4d62-9488-444c4e898f79",
                "7cde582d-1b58-4064-b922-c2cab21cb788"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 127,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8a14e24d-f25e-4177-924d-27e3953a425b",
              "title": "Deve efetuar testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve efetuar uma falha em que o campo email não pode ficar em branco e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo email não pode ficar em branco e status code 400",
                  "timedOut": null,
                  "duration": 44,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.emailEmBranco).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property(\"email\").to.be.equal(\"email não pode ficar em branco\");\n  });\n});",
                  "err": {},
                  "uuid": "163e4ba2-55a2-4e72-9cb3-ff77a24f7434",
                  "parentUUID": "8a14e24d-f25e-4177-924d-27e3953a425b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar uma falha em que o campo email é obrigatório e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo email é obrigatório e status code 400",
                  "timedOut": null,
                  "duration": 44,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.semCampoEmail).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property(\"email\").to.be.equal(\"email é obrigatório\");\n  });\n});",
                  "err": {},
                  "uuid": "7ec5d005-ddd8-4332-886b-5f117177c896",
                  "parentUUID": "8a14e24d-f25e-4177-924d-27e3953a425b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar uma falha em que o campo senha(password) não pode ficar em branco e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo senha(password) não pode ficar em branco e status code 400",
                  "timedOut": null,
                  "duration": 56,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.senhaEmBranco).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property('password').to.be.equal(\"password não pode ficar em branco\");\n  });\n});",
                  "err": {},
                  "uuid": "cf44baea-d5ec-45dc-b112-dac680b0146a",
                  "parentUUID": "8a14e24d-f25e-4177-924d-27e3953a425b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar uma falha em que o campo senha(password) é obrigatório e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo senha(password) é obrigatório e status code 400",
                  "timedOut": null,
                  "duration": 46,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.semCampoSenha).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property(\"password\").to.be.equal(\"password é obrigatório\");\n  });\n});",
                  "err": {},
                  "uuid": "8a9701f8-995b-4e95-be79-61efd4254c62",
                  "parentUUID": "8a14e24d-f25e-4177-924d-27e3953a425b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar falha em que os todos os campos são vazios, e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar falha em que os todos os campos são vazios, e status code 400",
                  "timedOut": null,
                  "duration": 48,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.semCampos).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property('password').to.be.equal('password é obrigatório');\n    expect(res.body).has.property('email').to.be.equal('email é obrigatório');\n  });\n});",
                  "err": {},
                  "uuid": "9f0521b6-486e-47bc-8e50-654e75024d0a",
                  "parentUUID": "8a14e24d-f25e-4177-924d-27e3953a425b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "163e4ba2-55a2-4e72-9cb3-ff77a24f7434",
                "7ec5d005-ddd8-4332-886b-5f117177c896",
                "cf44baea-d5ec-45dc-b112-dac680b0146a",
                "8a9701f8-995b-4e95-be79-61efd4254c62",
                "9f0521b6-486e-47bc-8e50-654e75024d0a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 238,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "643d908d-3a9c-4ee8-b40a-708bbfb8d28b",
      "title": "",
      "fullFile": "cypress/integration/api_produtos.spec.js",
      "file": "cypress/integration/api_produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "43bc205c-38ec-40b3-8544-3d505df7e969",
          "title": "Testes da rota /produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve validar o login com status code 200 e authorization",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar o login com status code 200 e authorization",
                  "timedOut": null,
                  "duration": 72,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n    bearer = res.body.authorization;\n  });\n});",
                  "err": {},
                  "uuid": "7ec75a9d-6bfd-4059-bcfd-da165e1a3851",
                  "parentUUID": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar produto corretamente possuindo status code 201 e exibir propriedade message",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve cadastrar produto corretamente possuindo status code 201 e exibir propriedade message",
                  "timedOut": null,
                  "duration": 57,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).has.property(\"message\").equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property(\"_id\");\n  idProduto = res.body._id;\n});",
                  "err": {},
                  "uuid": "86af2a40-f2ad-437d-9fa0-d81f906a5c59",
                  "parentUUID": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produtos e se possui status code 200",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve buscar produtos e se possui status code 200",
                  "timedOut": null,
                  "duration": 101,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutos().then(res => {\n  expect(res.status).to.equal(200);\n});",
                  "err": {},
                  "uuid": "cf1aaa26-caa0-4bbf-8c1f-b4bdf42d7ff6",
                  "parentUUID": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produto por id e se possui status code 200",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve buscar produto por id e se possui status code 200",
                  "timedOut": null,
                  "duration": 60,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutoPorId(idProduto).then(res => {\n  expect(res.status).to.be.equal(200);\n});",
                  "err": {},
                  "uuid": "e9e70ef5-2d31-4ab4-af4e-c810c9436784",
                  "parentUUID": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato sobre a requisição GET /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar contrato sobre a requisição GET /produtos",
                  "timedOut": null,
                  "duration": 103,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutos().then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_produtos\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "6e66e2df-125c-4e3f-a0a2-fd51a52d3037",
                  "parentUUID": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato sobre a requisição POST /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar contrato sobre a requisição POST /produtos",
                  "timedOut": null,
                  "duration": 48,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  expect(res.status).to.be.equal(201);\n  cy.validarContrato(res, \"post_produtos\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "719de420-42b0-4f8e-93b2-c167d4466c83",
                  "parentUUID": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar o produto PUT /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve editar o produto PUT /produtos",
                  "timedOut": null,
                  "duration": 47,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.produtoEdit();\ncy.editarProduto(idProduto, body, bearer).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property('message').equal('Registro alterado com sucesso');\n  cy.validarContrato(res, \"put_produtos_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "38b50f02-d743-4130-b3c1-515ba0d64333",
                  "parentUUID": "f1cc4506-8a44-4982-b036-52317ee2f7ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ec75a9d-6bfd-4059-bcfd-da165e1a3851",
                "86af2a40-f2ad-437d-9fa0-d81f906a5c59",
                "cf1aaa26-caa0-4bbf-8c1f-b4bdf42d7ff6",
                "e9e70ef5-2d31-4ab4-af4e-c810c9436784",
                "6e66e2df-125c-4e3f-a0a2-fd51a52d3037",
                "719de420-42b0-4f8e-93b2-c167d4466c83",
                "38b50f02-d743-4130-b3c1-515ba0d64333"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 488,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33e86e4b-45ef-4497-8f07-767373771469",
              "title": "Deve efetuar os testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve falhar o cadastro do produto por ser existente, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por ser existente, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 291,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produtoExistente).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"message\").equal(\"Já existe produto com esse nome\");\n});",
                  "err": {},
                  "uuid": "81896102-107c-4aa4-8269-d2c990dee8e8",
                  "parentUUID": "33e86e4b-45ef-4497-8f07-767373771469",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 43,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemNome = _factory.default.produtoNomeBranco();\ncy.cadastrarProduto(bearer, produtoSemNome).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"nome\").equal(\"nome não pode ficar em branco\");\n});",
                  "err": {},
                  "uuid": "9cde4f6e-8ca5-49f1-ac9b-3659f184b881",
                  "parentUUID": "33e86e4b-45ef-4497-8f07-767373771469",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir descrição, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir descrição, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 51,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemDescricao = _factory.default.produtoSemDescricao();\ncy.cadastrarProduto(bearer, produtoSemDescricao).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"descricao\").equal(\"descricao não pode ficar em branco\");\n});",
                  "err": {},
                  "uuid": "a82613ab-d760-4e24-8f94-c25606a0808c",
                  "parentUUID": "33e86e4b-45ef-4497-8f07-767373771469",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemNome = _factory.default.produtoSemNome();\ncy.cadastrarProduto(bearer, produtoSemNome).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"nome\").equal(\"nome é obrigatório\");\n});",
                  "err": {},
                  "uuid": "e43b5ded-1596-4911-9c79-5fe231a08969",
                  "parentUUID": "33e86e4b-45ef-4497-8f07-767373771469",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato negativo sobre a requisição POST /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve validar contrato negativo sobre a requisição POST /produtos",
                  "timedOut": null,
                  "duration": 53,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produtoExistente).then(res => {\n  expect(res.status).to.be.equal(400);\n  cy.validarContrato(res, \"post_produtos\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "487b3cee-1675-4af5-92ed-5df27f028849",
                  "parentUUID": "33e86e4b-45ef-4497-8f07-767373771469",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar teste de inserção de Token inválido",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve realizar teste de inserção de Token inválido",
                  "timedOut": null,
                  "duration": 87,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.invalido).then(res => {\n    bearer = res.body.authorization;\n    cy.cadastrarProduto(bearer, produto).then(res => {\n      expect(res.statusCode === 401);\n      expect(res.body).to.have.property(\"message\");\n      expect(res.body.message).to.be.equal(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\n      cy.validarContrato(res, \"post_produtos\", 401).then(validacao => {\n        expect(validacao).to.be.equal(\"Contrato validado!\");\n      });\n    });\n  });\n});",
                  "err": {},
                  "uuid": "c4f4ef05-07fb-4a5f-89ab-c7a0f1bf1f23",
                  "parentUUID": "33e86e4b-45ef-4497-8f07-767373771469",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81896102-107c-4aa4-8269-d2c990dee8e8",
                "9cde4f6e-8ca5-49f1-ac9b-3659f184b881",
                "a82613ab-d760-4e24-8f94-c25606a0808c",
                "e43b5ded-1596-4911-9c79-5fe231a08969",
                "487b3cee-1675-4af5-92ed-5df27f028849",
                "c4f4ef05-07fb-4a5f-89ab-c7a0f1bf1f23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 574,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "21814262-0b8f-4ca7-9bae-6ea384225753",
      "title": "",
      "fullFile": "cypress/integration/api_usuarios.spec.js",
      "file": "cypress/integration/api_usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dd945f9a-79da-4c2d-a54c-d1b10e08ed03",
          "title": "Testes na rota /usuarios e validações de contrato",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b509ec25-9e10-424d-b3d5-cd897e3b7137",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar um usuário corretamente, possuindo status code 200 e propriedade '_id'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve cadastrar um usuário corretamente, possuindo status code 200 e propriedade '_id'",
                  "timedOut": null,
                  "duration": 86,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioBody();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property(\"_id\");\n  cy.validarContrato(res, \"post_usuarios\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n  usuarioId = res.body._id;\n});",
                  "err": {},
                  "uuid": "a08d8950-5318-4a74-aa51-11bf419d2cce",
                  "parentUUID": "b509ec25-9e10-424d-b3d5-cd897e3b7137",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve listar usuários cadastrados possuindo status code 200",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve listar usuários cadastrados possuindo status code 200",
                  "timedOut": null,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.listarUsuarios().then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_usuarios\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "98f3db0e-ea2a-4b71-8a1f-8f0d7f9f0c98",
                  "parentUUID": "b509ec25-9e10-424d-b3d5-cd897e3b7137",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar usuário pelo ID possuindo status code 200 e propriedade 'nome' e 'email'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve buscar usuário pelo ID possuindo status code 200 e propriedade 'nome' e 'email'",
                  "timedOut": null,
                  "duration": 50,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarUsuarioId(usuarioId).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"nome\");\n  expect(res.body).to.have.property(\"email\");\n  cy.validarContrato(res, \"get_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "bd4f4761-4ff0-4198-ad74-ce2fd464b184",
                  "parentUUID": "b509ec25-9e10-424d-b3d5-cd897e3b7137",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar usuário possuindo status code 200 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve editar usuário possuindo status code 200 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 52,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.UsuarioEdit();\ncy.editarUsuario(usuarioId, body).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"message\").equal(\"Registro alterado com sucesso\");\n  cy.validarContrato(res, \"put_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "79ca386f-77ad-4bb8-b3fc-b83cf4d68d0f",
                  "parentUUID": "b509ec25-9e10-424d-b3d5-cd897e3b7137",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar usuário caso o mesmo não possua cadastro possindo status code 201, propriedades 'message' e '_id'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve cadastrar usuário caso o mesmo não possua cadastro possindo status code 201, propriedades 'message' e '_id'",
                  "timedOut": null,
                  "duration": 53,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioBody();\nlet body = _factory.default.UsuarioEdit();\ncy.editarUsuario(usuario, body).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).to.have.property(\"message\").equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property(\"_id\");\n  cy.validarContrato(res, \"put_usuarios_id\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "081c7747-0dec-4385-bc7d-921b0529df18",
                  "parentUUID": "b509ec25-9e10-424d-b3d5-cd897e3b7137",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir usuário possuindo status code 200 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve excluir usuário possuindo status code 200 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 44,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.excluirUsuario(usuarioId).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"message\").equal(\"Registro excluído com sucesso\");\n  cy.validarContrato(res, \"delete_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "32bad846-3497-4651-98ab-6a0698311e2e",
                  "parentUUID": "b509ec25-9e10-424d-b3d5-cd897e3b7137",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a08d8950-5318-4a74-aa51-11bf419d2cce",
                "98f3db0e-ea2a-4b71-8a1f-8f0d7f9f0c98",
                "bd4f4761-4ff0-4198-ad74-ce2fd464b184",
                "79ca386f-77ad-4bb8-b3fc-b83cf4d68d0f",
                "081c7747-0dec-4385-bc7d-921b0529df18",
                "32bad846-3497-4651-98ab-6a0698311e2e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 369,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "50b77630-f837-4284-b4b4-4bc803c1d233",
              "title": "Deve efetuar os testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve dar erro ao tentar cadastrar usuário já cadastrado possuindo status code 400 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao tentar cadastrar usuário já cadastrado possuindo status code 400 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 47,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioExistente();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Este email já está sendo usado\");\n  cy.validarContrato(res, \"post_usuarios\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "5b703bcb-7421-4f82-984b-4ab530fd1329",
                  "parentUUID": "50b77630-f837-4284-b4b4-4bc803c1d233",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve dar erro ao buscar usuário por ID possuindo status code 400 epropriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao buscar usuário por ID possuindo status code 400 epropriedade 'message'",
                  "timedOut": null,
                  "duration": 47,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarUsuarioId().then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Usuário não encontrado\");\n  cy.validarContrato(res, \"get_usuarios_id\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "f133cd1f-9757-437f-b849-d4e4cf5d46de",
                  "parentUUID": "50b77630-f837-4284-b4b4-4bc803c1d233",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve dar erro ao editar usuário com email já cadastrado possuindo status code 400 e prorpiedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao editar usuário com email já cadastrado possuindo status code 400 e prorpiedade 'message'",
                  "timedOut": null,
                  "duration": 57,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.UsuarioExistente();\ncy.editarUsuario(usuarioId, body).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").equal(\"Este email já está sendo usado\");\n  cy.validarContrato(res, \"put_usuarios_id\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "01b56cb2-cfa6-4b93-8647-8d81cd09c3f0",
                  "parentUUID": "50b77630-f837-4284-b4b4-4bc803c1d233",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b703bcb-7421-4f82-984b-4ab530fd1329",
                "f133cd1f-9757-437f-b849-d4e4cf5d46de",
                "01b56cb2-cfa6-4b93-8647-8d81cd09c3f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 151,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "eb1be5f6-9323-4e81-b9ec-6e60c5628085",
      "title": "",
      "fullFile": "cypress/integration/front_listar_produtos.spec.js",
      "file": "cypress/integration/front_listar_produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dd9d0d00-e2ea-440e-94ba-96764ae9c657",
          "title": "Testar camada Listar Produto",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Listar produtos e validar url",
              "fullTitle": "Testar camada Listar Produto Listar produtos e validar url",
              "timedOut": null,
              "duration": 4044,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_listar_produtos.default.validarUrl();\n_listar_produtos.default.clicar_botão_listar_produtos();",
              "err": {},
              "uuid": "86dffa8f-7766-4edd-925c-1bfc43fa643e",
              "parentUUID": "dd9d0d00-e2ea-440e-94ba-96764ae9c657",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "86dffa8f-7766-4edd-925c-1bfc43fa643e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4044,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "42fa454e-9a2b-499a-9f00-438857900ff5",
      "title": "",
      "fullFile": "cypress/integration/front_listar_usuarios.spec.js",
      "file": "cypress/integration/front_listar_usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8a7f2e3f-a959-418f-b741-a0334a6b147a",
          "title": "Teste na camada Listar Usuarios",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Listar Usuarios",
              "fullTitle": "Teste na camada Listar Usuarios Listar Usuarios",
              "timedOut": null,
              "duration": 3267,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_listar_usuarios.default.clicar_botão_listar();\n_listar_usuarios.default.validarUrl();",
              "err": {},
              "uuid": "871b0294-69fe-4573-ac80-3eb6f464813a",
              "parentUUID": "8a7f2e3f-a959-418f-b741-a0334a6b147a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "871b0294-69fe-4573-ac80-3eb6f464813a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3267,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8cb8bbe0-6e41-44de-8bb8-d3766cfdca75",
      "title": "",
      "fullFile": "cypress/integration/front_login.spec.js",
      "file": "cypress/integration/front_login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1a9c6bbf-f71f-4d1f-950f-067001c57f23",
          "title": "Testes na rota login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Logar com sucesso",
              "fullTitle": "Testes na rota login Logar com sucesso",
              "timedOut": null,
              "duration": 2800,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.preencherEmail();\n_login.default.preencherSenha();\n_login.default.clicarBtEntrar();\n_login.default.validarUrl('/admin/home');\n_login.default.clicarBtLogout();",
              "err": {},
              "uuid": "8fbc7767-becd-4a77-8eef-995dac506786",
              "parentUUID": "1a9c6bbf-f71f-4d1f-950f-067001c57f23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Logar sem a senha",
              "fullTitle": "Testes na rota login Logar sem a senha",
              "timedOut": null,
              "duration": 1467,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.preencherEmail();\n_login.default.clicarBtEntrar();\n_login.default.validarAlerta(\"Password é obrigatório\");",
              "err": {},
              "uuid": "1c62625d-2b27-44e3-b9fe-e357654cfc04",
              "parentUUID": "1a9c6bbf-f71f-4d1f-950f-067001c57f23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Logar sem email",
              "fullTitle": "Testes na rota login Logar sem email",
              "timedOut": null,
              "duration": 2007,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.preencherSenha();\n_login.default.clicarBtEntrar();\n_login.default.validarAlerta(\"Email é obrigatório\");",
              "err": {},
              "uuid": "7c3c0c99-92e8-42f4-899d-e17c950087fe",
              "parentUUID": "1a9c6bbf-f71f-4d1f-950f-067001c57f23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Logar sem preencher campos",
              "fullTitle": "Testes na rota login Logar sem preencher campos",
              "timedOut": null,
              "duration": 975,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.clicarBtEntrar();\n_login.default.validarAlerta(\"Password é obrigatório\");\n_login.default.validarAlerta(\"Email é obrigatório\");",
              "err": {},
              "uuid": "5ee000a1-311c-4f6e-9aad-249deb480c84",
              "parentUUID": "1a9c6bbf-f71f-4d1f-950f-067001c57f23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validar componentes /login",
              "fullTitle": "Testes na rota login Validar componentes /login",
              "timedOut": null,
              "duration": 905,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.validarComponentesLogin();",
              "err": {},
              "uuid": "d6b3986d-d900-4ee2-a7ba-1e19475dd054",
              "parentUUID": "1a9c6bbf-f71f-4d1f-950f-067001c57f23",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8fbc7767-becd-4a77-8eef-995dac506786",
            "1c62625d-2b27-44e3-b9fe-e357654cfc04",
            "7c3c0c99-92e8-42f4-899d-e17c950087fe",
            "5ee000a1-311c-4f6e-9aad-249deb480c84",
            "d6b3986d-d900-4ee2-a7ba-1e19475dd054"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8154,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3e1753f5-3bf0-43ba-a791-67a8616a2864",
      "title": "",
      "fullFile": "cypress/integration/front_registrando_produto.spec.js",
      "file": "cypress/integration/front_registrando_produto.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1a939767-db23-4ca9-a44e-1df6024e2615",
          "title": "Testes na rota cadastro de produto",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cadastrando produto e validando na lista",
              "fullTitle": "Testes na rota cadastro de produto Cadastrando produto e validando na lista",
              "timedOut": null,
              "duration": 4951,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_product.default.cadastrarProdutoAleatório();\n_register_product.default.clicarBtnCadastrar();\n_register_product.default.validarProdutoCriado();",
              "err": {},
              "uuid": "ce8a6429-0f11-43e7-9631-ed31265ad84e",
              "parentUUID": "1a939767-db23-4ca9-a44e-1df6024e2615",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce8a6429-0f11-43e7-9631-ed31265ad84e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4951,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4cf2af49-eab3-4f12-b242-eee12e7d3dcc",
      "title": "",
      "fullFile": "cypress/integration/front_registrando_usuarios.spec.js",
      "file": "cypress/integration/front_registrando_usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cc1279ef-52a3-4cf2-ac99-324b703d2f6d",
          "title": "Testes na rota cadastro de usuário",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validando URL - mensagem de Cadastro realizado com sucesso e boas vindas",
              "fullTitle": "Testes na rota cadastro de usuário Validando URL - mensagem de Cadastro realizado com sucesso e boas vindas",
              "timedOut": null,
              "duration": 6457,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_user.default.validarMsgCadastroRealizado();\n_register_user.default.validarUrl();\n_register_user.default.validarMsgBoasVindas();\n_register_user.default.validarMsgBoasVindasNome();",
              "err": {},
              "uuid": "0c87324d-bdf1-46b7-aa78-5eaeead7c99c",
              "parentUUID": "cc1279ef-52a3-4cf2-ac99-324b703d2f6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validando Textos dos componentes",
              "fullTitle": "Testes na rota cadastro de usuário Validando Textos dos componentes",
              "timedOut": null,
              "duration": 5723,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_user.default.validandoComponentes();",
              "err": {},
              "uuid": "bef9bdf4-89f8-4183-b700-a323a3eb171f",
              "parentUUID": "cc1279ef-52a3-4cf2-ac99-324b703d2f6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validando se o usuário cadastrado aparece na lista",
              "fullTitle": "Testes na rota cadastro de usuário Validando se o usuário cadastrado aparece na lista",
              "timedOut": null,
              "duration": 5491,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_user.default.acessarListaUser();\n_register_user.default.validaUsuarioCriado();",
              "err": {},
              "uuid": "13a5a4a5-a116-4f00-827a-68b31ee400fd",
              "parentUUID": "cc1279ef-52a3-4cf2-ac99-324b703d2f6d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0c87324d-bdf1-46b7-aa78-5eaeead7c99c",
            "bef9bdf4-89f8-4183-b700-a323a3eb171f",
            "13a5a4a5-a116-4f00-827a-68b31ee400fd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17671,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "yyyymmdd_HHMMss",
        "reportTitle": "Relatório dos testes",
        "cdn": true,
        "charts": true
      },
      "version": "6.0.1"
    }
  }
}