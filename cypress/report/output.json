{
  "stats": {
    "suites": 9,
    "tests": 41,
    "passes": 41,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-10T16:41:13.905Z",
    "end": "2021-11-10T16:42:39.910Z",
    "duration": 39159,
    "testsRegistered": 41,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cc0682ee-d895-4948-a068-2ba34d9abf58",
      "title": "",
      "fullFile": "cypress/integration/api_carrinho.spec.js",
      "file": "cypress/integration/api_carrinho.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "046efe14-e4a5-45dc-98a7-7d1ea5d54988",
          "title": "Teste da rota /login para execução posterior da rota /carrinhos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar o login com status code 200 e authorization",
              "fullTitle": "Teste da rota /login para execução posterior da rota /carrinhos Deve validar o login com status code 200 e authorization",
              "timedOut": null,
              "duration": 310,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n  });\n});",
              "err": {},
              "uuid": "ffeb29bc-871e-416c-899d-fd4fb5dc13e5",
              "parentUUID": "046efe14-e4a5-45dc-98a7-7d1ea5d54988",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ffeb29bc-871e-416c-899d-fd4fb5dc13e5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 310,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5b52aac3-bbef-41c3-85f1-6f2f42646248",
          "title": "Testes na rota /carrinhos e validações de contrato",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve listar carrinhos cadastrados possuindo statys code 200e propriedade 'quantidade' e 'carrinhos'",
              "fullTitle": "Testes na rota /carrinhos e validações de contrato Deve listar carrinhos cadastrados possuindo statys code 200e propriedade 'quantidade' e 'carrinhos'",
              "timedOut": null,
              "duration": 48,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.listarCarrinhos().then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"quantidade\");\n  expect(res.body).to.have.property(\"carrinhos\"); //cy.validarContrato(res, \"get_carrinhos\", 200).then(validacao =>{\n  // expect(validacao).to.be.equal(\"Contrato validado!\")\n  // }) \n});",
              "err": {},
              "uuid": "4f3fd925-bfe8-4ef4-a8ec-4f886ec5dc72",
              "parentUUID": "5b52aac3-bbef-41c3-85f1-6f2f42646248",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f3fd925-bfe8-4ef4-a8ec-4f886ec5dc72"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 48,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "11a9d0ca-4426-4468-9260-121bc5cdb719",
      "title": "",
      "fullFile": "cypress/integration/api_login.spec.js",
      "file": "cypress/integration/api_login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "11151bf1-43b8-4295-a9bf-dcc83df7d6ab",
          "title": "Testes da rota /login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5c2a21e0-9012-4bb9-83e1-db37e1cb403a",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve validar o login com status code 200 e authorization",
                  "fullTitle": "Testes da rota /login Deve efetuar os testes positivos da rota Deve validar o login com status code 200 e authorization",
                  "timedOut": null,
                  "duration": 105,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n    bearer = res.body.authorization;\n  });\n});",
                  "err": {},
                  "uuid": "cb18ff30-c77d-47c0-a662-ff78887bd4f1",
                  "parentUUID": "5c2a21e0-9012-4bb9-83e1-db37e1cb403a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar teste de contrato sobre a requisição POST /login",
                  "fullTitle": "Testes da rota /login Deve efetuar os testes positivos da rota Deve realizar teste de contrato sobre a requisição POST /login",
                  "timedOut": null,
                  "duration": 82,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.be.equal(200);\n    cy.validarContrato(res, \"post_login\", 200).then(validacao => {\n      expect(validacao).to.be.equal(\"Contrato validado!\");\n    });\n  });\n});",
                  "err": {},
                  "uuid": "d27b8e97-4bc4-48ca-8396-9eaa8652f73d",
                  "parentUUID": "5c2a21e0-9012-4bb9-83e1-db37e1cb403a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb18ff30-c77d-47c0-a662-ff78887bd4f1",
                "d27b8e97-4bc4-48ca-8396-9eaa8652f73d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 187,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22e51d12-6644-436e-b0ea-bf9ad09a40be",
              "title": "Deve efetuar testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve efetuar uma falha em que o campo email não pode ficar em branco e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo email não pode ficar em branco e status code 400",
                  "timedOut": null,
                  "duration": 54,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.emailEmBranco).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property(\"email\").to.be.equal(\"email não pode ficar em branco\");\n  });\n});",
                  "err": {},
                  "uuid": "6ef638f1-5ebc-47b7-a3d2-9c9c6a42604b",
                  "parentUUID": "22e51d12-6644-436e-b0ea-bf9ad09a40be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar uma falha em que o campo email é obrigatório e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo email é obrigatório e status code 400",
                  "timedOut": null,
                  "duration": 47,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.semCampoEmail).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property(\"email\").to.be.equal(\"email é obrigatório\");\n  });\n});",
                  "err": {},
                  "uuid": "2346ee30-c238-4a68-ac02-cd30c7f1680e",
                  "parentUUID": "22e51d12-6644-436e-b0ea-bf9ad09a40be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar uma falha em que o campo senha(password) não pode ficar em branco e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo senha(password) não pode ficar em branco e status code 400",
                  "timedOut": null,
                  "duration": 46,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.senhaEmBranco).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property('password').to.be.equal(\"password não pode ficar em branco\");\n  });\n});",
                  "err": {},
                  "uuid": "ba03cdd9-fbca-45ba-b133-3949ec13aa03",
                  "parentUUID": "22e51d12-6644-436e-b0ea-bf9ad09a40be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar uma falha em que o campo senha(password) é obrigatório e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo senha(password) é obrigatório e status code 400",
                  "timedOut": null,
                  "duration": 50,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.semCampoSenha).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property(\"password\").to.be.equal(\"password é obrigatório\");\n  });\n});",
                  "err": {},
                  "uuid": "5dd21627-87a2-4801-b119-eca686460fd4",
                  "parentUUID": "22e51d12-6644-436e-b0ea-bf9ad09a40be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar falha em que os todos os campos são vazios, e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar falha em que os todos os campos são vazios, e status code 400",
                  "timedOut": null,
                  "duration": 64,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.semCampos).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property('password').to.be.equal('password é obrigatório');\n    expect(res.body).has.property('email').to.be.equal('email é obrigatório');\n  });\n});",
                  "err": {},
                  "uuid": "f0d1d528-8d25-4135-9a83-35049a42bafe",
                  "parentUUID": "22e51d12-6644-436e-b0ea-bf9ad09a40be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ef638f1-5ebc-47b7-a3d2-9c9c6a42604b",
                "2346ee30-c238-4a68-ac02-cd30c7f1680e",
                "ba03cdd9-fbca-45ba-b133-3949ec13aa03",
                "5dd21627-87a2-4801-b119-eca686460fd4",
                "f0d1d528-8d25-4135-9a83-35049a42bafe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 261,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0ce4058c-a769-4e64-951b-639c7738365a",
      "title": "",
      "fullFile": "cypress/integration/api_produtos.spec.js",
      "file": "cypress/integration/api_produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f41bae16-db84-4c04-8feb-362effc1a220",
          "title": "Testes da rota /produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve validar o login com status code 200 e authorization",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar o login com status code 200 e authorization",
                  "timedOut": null,
                  "duration": 70,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n    bearer = res.body.authorization;\n  });\n});",
                  "err": {},
                  "uuid": "7bf0b4d9-af7d-4985-b153-993f58b6139b",
                  "parentUUID": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar produto corretamente possuindo status code 201 e exibir propriedade message",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve cadastrar produto corretamente possuindo status code 201 e exibir propriedade message",
                  "timedOut": null,
                  "duration": 79,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).has.property(\"message\").equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property('_id');\n  idProduto = res.body._id;\n});",
                  "err": {},
                  "uuid": "a243ca06-b06e-4fc0-8c0c-25a70cbc5394",
                  "parentUUID": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produtos e se possui status code 200",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve buscar produtos e se possui status code 200",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutos().then(res => {\n  expect(res.status).to.equal(200);\n});",
                  "err": {},
                  "uuid": "43ccec1a-82f4-4110-afac-17e10d74e021",
                  "parentUUID": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produto por id e se possui status code 200",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve buscar produto por id e se possui status code 200",
                  "timedOut": null,
                  "duration": 43,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutoPorId(idProduto).then(res => {\n  expect(res.status).to.be.equal(200);\n});",
                  "err": {},
                  "uuid": "246b30b5-d343-4ce5-bc78-ed40398f4105",
                  "parentUUID": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato sobre a requisição GET /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar contrato sobre a requisição GET /produtos",
                  "timedOut": null,
                  "duration": 91,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutos().then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_produtos\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "27fd73f7-84ad-493b-a070-476e3519e6fe",
                  "parentUUID": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato sobre a requisição POST /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar contrato sobre a requisição POST /produtos",
                  "timedOut": null,
                  "duration": 59,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\nlet produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  expect(res.status).to.be.equal(201);\n  cy.validarContrato(res, \"post_produtos\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "217ea31c-e607-4cfd-8e3b-ba1c6f99bb9a",
                  "parentUUID": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar o produto PUT /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve editar o produto PUT /produtos",
                  "timedOut": null,
                  "duration": 54,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.produtoEdit();\ncy.editarProduto(idProduto, body, bearer).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property('message').equal('Registro alterado com sucesso');\n  cy.validarContrato(res, \"put_produtos_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "2595727d-6b73-446e-aa9f-ea408a094043",
                  "parentUUID": "5b7ba979-2d66-4dc9-844b-86827bfad69c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7bf0b4d9-af7d-4985-b153-993f58b6139b",
                "a243ca06-b06e-4fc0-8c0c-25a70cbc5394",
                "43ccec1a-82f4-4110-afac-17e10d74e021",
                "246b30b5-d343-4ce5-bc78-ed40398f4105",
                "27fd73f7-84ad-493b-a070-476e3519e6fe",
                "217ea31c-e607-4cfd-8e3b-ba1c6f99bb9a",
                "2595727d-6b73-446e-aa9f-ea408a094043"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 445,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca8b9028-3d0d-41ae-856d-53d300c82646",
              "title": "Deve efetuar os testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve falhar o cadastro do produto por ser existente, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por ser existente, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 50,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produtoExistente).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"message\").equal(\"Já existe produto com esse nome\");\n});",
                  "err": {},
                  "uuid": "b5f4f8d6-893d-48ac-bd06-e7905c6a8108",
                  "parentUUID": "ca8b9028-3d0d-41ae-856d-53d300c82646",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemNome = _factory.default.produtoNomeBranco();\ncy.cadastrarProduto(bearer, produtoSemNome).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"nome\").equal(\"nome não pode ficar em branco\");\n});",
                  "err": {},
                  "uuid": "39e795b9-3aac-4d5a-aaea-23a01ee1407f",
                  "parentUUID": "ca8b9028-3d0d-41ae-856d-53d300c82646",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir descrição, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir descrição, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 51,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemDescricao = _factory.default.produtoSemDescricao();\ncy.cadastrarProduto(bearer, produtoSemDescricao).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"descricao\").equal(\"descricao não pode ficar em branco\");\n});",
                  "err": {},
                  "uuid": "b2a81ae0-7fcc-4057-b305-19059e29c67f",
                  "parentUUID": "ca8b9028-3d0d-41ae-856d-53d300c82646",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 43,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemNome = _factory.default.produtoSemNome();\ncy.cadastrarProduto(bearer, produtoSemNome).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"nome\").equal(\"nome é obrigatório\");\n});",
                  "err": {},
                  "uuid": "cc2c2cb9-b899-4f4f-b4ad-abd7460f920f",
                  "parentUUID": "ca8b9028-3d0d-41ae-856d-53d300c82646",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato negativo sobre a requisição POST /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve validar contrato negativo sobre a requisição POST /produtos",
                  "timedOut": null,
                  "duration": 55,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\nlet produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produtoExistente).then(res => {\n  expect(res.status).to.be.equal(400);\n  cy.validarContrato(res, \"post_produtos\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "587d0eb9-345f-46ba-8059-d39317887c44",
                  "parentUUID": "ca8b9028-3d0d-41ae-856d-53d300c82646",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar teste de inserção de Token inválido",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve realizar teste de inserção de Token inválido",
                  "timedOut": null,
                  "duration": 90,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.invalido).then(res => {\n    bearer = res.body.authorization;\n    cy.cadastrarProduto(bearer, produto).then(res => {\n      expect(res.statusCode === 401);\n      expect(res.body).to.have.property(\"message\");\n      expect(res.body.message).to.be.equal(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\n      cy.validarContrato(res, \"post_produtos\", 401).then(validacao => {\n        expect(validacao).to.be.equal(\"Contrato validado!\");\n      });\n    });\n  });\n});",
                  "err": {},
                  "uuid": "fdf5b0ef-bea4-4172-b279-b7271802be11",
                  "parentUUID": "ca8b9028-3d0d-41ae-856d-53d300c82646",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5f4f8d6-893d-48ac-bd06-e7905c6a8108",
                "39e795b9-3aac-4d5a-aaea-23a01ee1407f",
                "b2a81ae0-7fcc-4057-b305-19059e29c67f",
                "cc2c2cb9-b899-4f4f-b4ad-abd7460f920f",
                "587d0eb9-345f-46ba-8059-d39317887c44",
                "fdf5b0ef-bea4-4172-b279-b7271802be11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 338,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9fa742c4-de14-4221-8291-62de67386438",
      "title": "",
      "fullFile": "cypress/integration/api_usuarios.spec.js",
      "file": "cypress/integration/api_usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cae05b0c-1e16-4699-a6f6-21bf7975de03",
          "title": "Testes na rota /usuarios e validações de contrato",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b65ae06b-5b29-46a7-93da-d8914a422e76",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar um usuário corretamente, possuindo status code 200 e propriedade '_id'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve cadastrar um usuário corretamente, possuindo status code 200 e propriedade '_id'",
                  "timedOut": null,
                  "duration": 98,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioBody();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property(\"_id\");\n  cy.validarContrato(res, \"post_usuarios\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n  usuarioId = res.body._id;\n});",
                  "err": {},
                  "uuid": "d60310e3-fe91-4683-bd0c-208ae3a2c7e7",
                  "parentUUID": "b65ae06b-5b29-46a7-93da-d8914a422e76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve listar usuários cadastrados possuindo status code 200",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve listar usuários cadastrados possuindo status code 200",
                  "timedOut": null,
                  "duration": 67,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.listarUsuarios().then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_usuarios\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "3f4d1022-cbc9-42ef-87d8-b9f461f98867",
                  "parentUUID": "b65ae06b-5b29-46a7-93da-d8914a422e76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar usuário pelo ID possuindo status code 200 e propriedade 'nome' e 'email'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve buscar usuário pelo ID possuindo status code 200 e propriedade 'nome' e 'email'",
                  "timedOut": null,
                  "duration": 300,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarUsuarioId(usuarioId).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"nome\");\n  expect(res.body).to.have.property(\"email\");\n  cy.validarContrato(res, \"get_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "8b51348e-3aec-4278-828a-de4e4904412b",
                  "parentUUID": "b65ae06b-5b29-46a7-93da-d8914a422e76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar usuário possuindo status code 200 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve editar usuário possuindo status code 200 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 50,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.UsuarioEdit();\ncy.editarUsuario(usuarioId, body).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"message\").equal(\"Registro alterado com sucesso\");\n  cy.validarContrato(res, \"put_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "67d2e698-58b1-4529-976c-d4b4de67aecf",
                  "parentUUID": "b65ae06b-5b29-46a7-93da-d8914a422e76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar usuário caso o mesmo não possua cadastro possindo status code 201, propriedades 'message' e '_id'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve cadastrar usuário caso o mesmo não possua cadastro possindo status code 201, propriedades 'message' e '_id'",
                  "timedOut": null,
                  "duration": 58,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioBody();\nlet body = _factory.default.UsuarioEdit();\ncy.editarUsuario(usuario, body).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).to.have.property(\"message\").equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property(\"_id\");\n  cy.validarContrato(res, \"put_usuarios_id\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "c2c63f11-6f37-4bdd-aa70-d7fe2848270c",
                  "parentUUID": "b65ae06b-5b29-46a7-93da-d8914a422e76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir usuário possuindo status code 200 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve excluir usuário possuindo status code 200 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 57,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.excluirUsuario(usuarioId).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"message\").equal(\"Registro excluído com sucesso\");\n  cy.validarContrato(res, \"delete_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "d8e2486a-1e4c-42cb-af74-f70d40c44409",
                  "parentUUID": "b65ae06b-5b29-46a7-93da-d8914a422e76",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d60310e3-fe91-4683-bd0c-208ae3a2c7e7",
                "3f4d1022-cbc9-42ef-87d8-b9f461f98867",
                "8b51348e-3aec-4278-828a-de4e4904412b",
                "67d2e698-58b1-4529-976c-d4b4de67aecf",
                "c2c63f11-6f37-4bdd-aa70-d7fe2848270c",
                "d8e2486a-1e4c-42cb-af74-f70d40c44409"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 630,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0435101a-ffae-4e43-acf5-91afcf5efe4b",
              "title": "Deve efetuar os testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve dar erro ao tentar cadastrar usuário já cadastrado possuindo status code 400 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao tentar cadastrar usuário já cadastrado possuindo status code 400 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 55,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioExistente();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Este email já está sendo usado\");\n  cy.validarContrato(res, \"post_usuarios\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "b28ff43d-a55e-4038-a3fe-fff6b025bf90",
                  "parentUUID": "0435101a-ffae-4e43-acf5-91afcf5efe4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve dar erro ao buscar usuário por ID possuindo status code 400 epropriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao buscar usuário por ID possuindo status code 400 epropriedade 'message'",
                  "timedOut": null,
                  "duration": 71,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarUsuarioId().then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Usuário não encontrado\");\n  cy.validarContrato(res, \"get_usuarios_id\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "15a7fb61-3a0e-4160-85aa-6354e21ea829",
                  "parentUUID": "0435101a-ffae-4e43-acf5-91afcf5efe4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve dar erro ao editar usuário com email já cadastrado possuindo status code 400 e prorpiedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao editar usuário com email já cadastrado possuindo status code 400 e prorpiedade 'message'",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.UsuarioExistente();\ncy.editarUsuario(usuarioId, body).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").equal(\"Este email já está sendo usado\");\n  cy.validarContrato(res, \"put_usuarios_id\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "bcaac90d-c309-4978-9da6-7c520a9fa780",
                  "parentUUID": "0435101a-ffae-4e43-acf5-91afcf5efe4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b28ff43d-a55e-4038-a3fe-fff6b025bf90",
                "15a7fb61-3a0e-4160-85aa-6354e21ea829",
                "bcaac90d-c309-4978-9da6-7c520a9fa780"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 175,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "989fbda9-b82f-4bc5-9e02-f9ccb720c6f4",
      "title": "",
      "fullFile": "cypress/integration/front_listar_produtos.spec.js",
      "file": "cypress/integration/front_listar_produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "14bbeceb-b253-4936-abec-8c997368dfd4",
          "title": "Testar camada Listar Produto",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Listar produtos e validar url",
              "fullTitle": "Testar camada Listar Produto Listar produtos e validar url",
              "timedOut": null,
              "duration": 4258,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_listar_produtos.default.validarUrl();\n_listar_produtos.default.clicar_botão_listar_produtos();",
              "err": {},
              "uuid": "584c5804-203c-4852-8f35-b7d8cb5778af",
              "parentUUID": "14bbeceb-b253-4936-abec-8c997368dfd4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "584c5804-203c-4852-8f35-b7d8cb5778af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4258,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e184c208-1023-4a6d-909c-399d9b459d4f",
      "title": "",
      "fullFile": "cypress/integration/front_listar_usuarios.spec.js",
      "file": "cypress/integration/front_listar_usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "95c38880-dd55-49e8-b7eb-1dcdedef5327",
          "title": "Teste na camada Listar Usuarios",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Listar Usuarios",
              "fullTitle": "Teste na camada Listar Usuarios Listar Usuarios",
              "timedOut": null,
              "duration": 3329,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_listar_usuarios.default.clicar_botão_listar();\n_listar_usuarios.default.validarUrl();",
              "err": {},
              "uuid": "fce09861-43cd-4d27-a48c-fd372ef8e506",
              "parentUUID": "95c38880-dd55-49e8-b7eb-1dcdedef5327",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fce09861-43cd-4d27-a48c-fd372ef8e506"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3329,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "372c93fa-cf89-42a4-8ac8-dbc6ce8598cc",
      "title": "",
      "fullFile": "cypress/integration/front_login.spec.js",
      "file": "cypress/integration/front_login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4e56c8e1-77b5-4c18-b889-9466303bd25e",
          "title": "Testes na rota login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Logar sem a senha",
              "fullTitle": "Testes na rota login Logar sem a senha",
              "timedOut": null,
              "duration": 2413,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.preencherEmail();\n_login.default.clicarBtEntrar();\n_login.default.validarAlerta(\"Password é obrigatório\");",
              "err": {},
              "uuid": "fa74c13d-1dda-496e-b6fd-0af02878125d",
              "parentUUID": "4e56c8e1-77b5-4c18-b889-9466303bd25e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Logar sem email",
              "fullTitle": "Testes na rota login Logar sem email",
              "timedOut": null,
              "duration": 1499,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.preencherSenha();\n_login.default.clicarBtEntrar();\n_login.default.validarAlerta(\"Email é obrigatório\");",
              "err": {},
              "uuid": "6c081a22-2d3d-4fdf-9305-173d38706204",
              "parentUUID": "4e56c8e1-77b5-4c18-b889-9466303bd25e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Logar sem preencher campos",
              "fullTitle": "Testes na rota login Logar sem preencher campos",
              "timedOut": null,
              "duration": 992,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.clicarBtEntrar();\n_login.default.validarAlerta(\"Password é obrigatório\");\n_login.default.validarAlerta(\"Email é obrigatório\");",
              "err": {},
              "uuid": "62384e20-a0b7-4e2b-a3f9-c3a86fd1bf30",
              "parentUUID": "4e56c8e1-77b5-4c18-b889-9466303bd25e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validar componentes /login",
              "fullTitle": "Testes na rota login Validar componentes /login",
              "timedOut": null,
              "duration": 917,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.validarComponentesLogin();",
              "err": {},
              "uuid": "1dc06783-4028-4f9d-926e-d25ef0b74ca7",
              "parentUUID": "4e56c8e1-77b5-4c18-b889-9466303bd25e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa74c13d-1dda-496e-b6fd-0af02878125d",
            "6c081a22-2d3d-4fdf-9305-173d38706204",
            "62384e20-a0b7-4e2b-a3f9-c3a86fd1bf30",
            "1dc06783-4028-4f9d-926e-d25ef0b74ca7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5821,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "07dc4e8e-2e70-4818-8941-8b56a1585364",
      "title": "",
      "fullFile": "cypress/integration/front_registrando_produto.spec.js",
      "file": "cypress/integration/front_registrando_produto.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cbb92b30-06eb-4587-8c28-535b211aa2df",
          "title": "Testes na rota cadastro de produto",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cadastrando produto e validando na lista",
              "fullTitle": "Testes na rota cadastro de produto Cadastrando produto e validando na lista",
              "timedOut": null,
              "duration": 5237,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_product.default.cadastrarProdutoAleatório();\n_register_product.default.clicarBtnCadastrar();\n_register_product.default.validarProdutoCriado();",
              "err": {},
              "uuid": "a55f9471-a142-44c2-b2ad-d6c02858f942",
              "parentUUID": "cbb92b30-06eb-4587-8c28-535b211aa2df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a55f9471-a142-44c2-b2ad-d6c02858f942"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5237,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "6a12b4bc-d55f-4417-a862-a46649cb70a5",
      "title": "",
      "fullFile": "cypress/integration/front_registrando_usuarios.spec.js",
      "file": "cypress/integration/front_registrando_usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7bc56bee-b60d-4127-9931-363f4f448f62",
          "title": "Testes na rota cadastro de usuário",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validando URL - mensagem de Cadastro realizado com sucesso e boas vindas",
              "fullTitle": "Testes na rota cadastro de usuário Validando URL - mensagem de Cadastro realizado com sucesso e boas vindas",
              "timedOut": null,
              "duration": 6469,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_user.default.validarMsgCadastroRealizado();\n_register_user.default.validarUrl();\n_register_user.default.validarMsgBoasVindas();\n_register_user.default.validarMsgBoasVindasNome();",
              "err": {},
              "uuid": "398a9f57-733a-46db-bd58-2a2c1cfafe90",
              "parentUUID": "7bc56bee-b60d-4127-9931-363f4f448f62",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validando Textos dos componentes",
              "fullTitle": "Testes na rota cadastro de usuário Validando Textos dos componentes",
              "timedOut": null,
              "duration": 5842,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_user.default.validandoComponentes();",
              "err": {},
              "uuid": "a6ae76c6-7caf-4db1-8dbc-c5225c478295",
              "parentUUID": "7bc56bee-b60d-4127-9931-363f4f448f62",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validando se o usuário cadastrado aparece na lista",
              "fullTitle": "Testes na rota cadastro de usuário Validando se o usuário cadastrado aparece na lista",
              "timedOut": null,
              "duration": 5809,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_user.default.acessarListaUser();\n_register_user.default.validaUsuarioCriado();",
              "err": {},
              "uuid": "d61f378f-19d6-4bea-a193-9c4f3e1f3988",
              "parentUUID": "7bc56bee-b60d-4127-9931-363f4f448f62",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "398a9f57-733a-46db-bd58-2a2c1cfafe90",
            "a6ae76c6-7caf-4db1-8dbc-c5225c478295",
            "d61f378f-19d6-4bea-a193-9c4f3e1f3988"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18120,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "yyyymmdd_HHMMss",
        "reportTitle": "Relatório dos testes",
        "cdn": true,
        "charts": true
      },
      "version": "6.0.1"
    }
  }
}