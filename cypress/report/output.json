{
  "stats": {
    "suites": 7,
    "tests": 36,
    "passes": 35,
    "pending": 0,
    "failures": 1,
    "start": "2021-11-08T18:15:23.244Z",
    "end": "2021-11-08T18:16:33.199Z",
    "duration": 34402,
    "testsRegistered": 36,
    "passPercent": 97.22222222222223,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7c3f06ce-2d78-4888-a08d-aed59563a730",
      "title": "",
      "fullFile": "cypress/integration/api_carrinho.spec.js",
      "file": "cypress/integration/api_carrinho.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ce45907c-7b09-4a86-a12b-9e9241421566",
          "title": "Teste da rota /login para execução posterior da rota /produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar o login com status code 200 e authorization",
              "fullTitle": "Teste da rota /login para execução posterior da rota /produtos Deve validar o login com status code 200 e authorization",
              "timedOut": null,
              "duration": 1754,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n    bearer = res.body.authorization;\n  });\n});",
              "err": {},
              "uuid": "98ebe3ef-f137-48bf-aaf2-3b491a3f88cf",
              "parentUUID": "ce45907c-7b09-4a86-a12b-9e9241421566",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "98ebe3ef-f137-48bf-aaf2-3b491a3f88cf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1754,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e1f7d67b-51ca-4370-9bdb-294454e8cdb8",
          "title": "Testes na rota /carrinhos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve listar carrinhos cadastrados",
              "fullTitle": "Testes na rota /carrinhos Deve listar carrinhos cadastrados",
              "timedOut": null,
              "duration": 51,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.listarCarrinhos().then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property('quantidade');\n  expect(res.body).to.have.property('carrinhos');\n});",
              "err": {},
              "uuid": "d2c848ab-ef34-47dd-9c85-abb1387286c4",
              "parentUUID": "e1f7d67b-51ca-4370-9bdb-294454e8cdb8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2c848ab-ef34-47dd-9c85-abb1387286c4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 51,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "606e53ee-e9a3-4719-adb6-037917261b88",
      "title": "",
      "fullFile": "cypress/integration/api_login.spec.js",
      "file": "cypress/integration/api_login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e850da5b-30dd-4579-a33a-5fd292cc8dba",
          "title": "Testes da rota /login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5f6e7103-5f3d-400a-91b3-7d69b4540f7f",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve validar o login com status code 200 e authorization",
                  "fullTitle": "Testes da rota /login Deve efetuar os testes positivos da rota Deve validar o login com status code 200 e authorization",
                  "timedOut": null,
                  "duration": 64,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n    bearer = res.body.authorization;\n  });\n});",
                  "err": {},
                  "uuid": "67eec0dd-f749-4b12-b1d6-af50555c04fd",
                  "parentUUID": "5f6e7103-5f3d-400a-91b3-7d69b4540f7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar teste de contrato sobre a requisição POST /login",
                  "fullTitle": "Testes da rota /login Deve efetuar os testes positivos da rota Deve realizar teste de contrato sobre a requisição POST /login",
                  "timedOut": null,
                  "duration": 96,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.be.equal(200);\n    cy.validarContrato(res, \"post_login\", 200).then(validacao => {\n      expect(validacao).to.be.equal(\"Contrato validado!\");\n    });\n  });\n});",
                  "err": {},
                  "uuid": "508df3b5-f474-4937-a37d-8088bbb30429",
                  "parentUUID": "5f6e7103-5f3d-400a-91b3-7d69b4540f7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67eec0dd-f749-4b12-b1d6-af50555c04fd",
                "508df3b5-f474-4937-a37d-8088bbb30429"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 160,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1fe74673-4881-4cda-a859-8cfb3af528e7",
              "title": "Deve efetuar testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve efetuar uma falha em que o campo email não pode ficar em branco e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo email não pode ficar em branco e status code 400",
                  "timedOut": null,
                  "duration": 51,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.emailEmBranco).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property(\"email\").to.be.equal(\"email não pode ficar em branco\");\n  });\n});",
                  "err": {},
                  "uuid": "f898eb4c-6052-4d23-b6b9-9df34b99e558",
                  "parentUUID": "1fe74673-4881-4cda-a859-8cfb3af528e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar uma falha em que o campo email é obrigatório e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo email é obrigatório e status code 400",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.semCampoEmail).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property(\"email\").to.be.equal(\"email é obrigatório\");\n  });\n});",
                  "err": {},
                  "uuid": "5d956f17-7c4e-483a-85f6-b0033e53fec1",
                  "parentUUID": "1fe74673-4881-4cda-a859-8cfb3af528e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar uma falha em que o campo senha(password) não pode ficar em branco e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo senha(password) não pode ficar em branco e status code 400",
                  "timedOut": null,
                  "duration": 60,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.senhaEmBranco).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property('password').to.be.equal(\"password não pode ficar em branco\");\n  });\n});",
                  "err": {},
                  "uuid": "6f3f1038-5025-4b56-9fc1-65e5928c9528",
                  "parentUUID": "1fe74673-4881-4cda-a859-8cfb3af528e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar uma falha em que o campo senha(password) é obrigatório e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo senha(password) é obrigatório e status code 400",
                  "timedOut": null,
                  "duration": 55,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.semCampoSenha).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property(\"password\").to.be.equal(\"password é obrigatório\");\n  });\n});",
                  "err": {},
                  "uuid": "bc27619d-0e36-43c2-9cb3-cbd72bff0825",
                  "parentUUID": "1fe74673-4881-4cda-a859-8cfb3af528e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar falha em que os todos os campos são vazios, e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar falha em que os todos os campos são vazios, e status code 400",
                  "timedOut": null,
                  "duration": 66,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.semCampos).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property('password').to.be.equal('password é obrigatório');\n    expect(res.body).has.property('email').to.be.equal('email é obrigatório');\n  });\n});",
                  "err": {},
                  "uuid": "6eabaf40-7fd8-4965-b304-15fb866a36da",
                  "parentUUID": "1fe74673-4881-4cda-a859-8cfb3af528e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f898eb4c-6052-4d23-b6b9-9df34b99e558",
                "5d956f17-7c4e-483a-85f6-b0033e53fec1",
                "6f3f1038-5025-4b56-9fc1-65e5928c9528",
                "bc27619d-0e36-43c2-9cb3-cbd72bff0825",
                "6eabaf40-7fd8-4965-b304-15fb866a36da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 281,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "471b8822-6785-4c88-8aed-fcf56c9a1119",
      "title": "",
      "fullFile": "cypress/integration/api_produtos.spec.js",
      "file": "cypress/integration/api_produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b9dbe16c-eb4b-4652-9361-2008ca1ad062",
          "title": "Teste da rota /login para execução posterior da rota /produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar o login com status code 200 e authorization",
              "fullTitle": "Teste da rota /login para execução posterior da rota /produtos Deve validar o login com status code 200 e authorization",
              "timedOut": null,
              "duration": 97,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n    bearer = res.body.authorization;\n  });\n});",
              "err": {},
              "uuid": "5cb29a6c-6eb7-455b-9f8d-8e1496e1d281",
              "parentUUID": "b9dbe16c-eb4b-4652-9361-2008ca1ad062",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5cb29a6c-6eb7-455b-9f8d-8e1496e1d281"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 97,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f392f7b3-e114-43fa-abd3-57a1944ac6cd",
          "title": "Testes da rota /produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d6532691-6760-4353-9a60-5a7b0065d058",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar produto corretamente possuindo status code 201 e exibir propriedade message",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve cadastrar produto corretamente possuindo status code 201 e exibir propriedade message",
                  "timedOut": null,
                  "duration": 79,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).has.property(\"message\").equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property('_id');\n  idProduto = res.body._id;\n});",
                  "err": {},
                  "uuid": "9376c2ca-8cf0-414c-8f00-20fd9039d93c",
                  "parentUUID": "d6532691-6760-4353-9a60-5a7b0065d058",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produtos e se possui status code 200",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve buscar produtos e se possui status code 200",
                  "timedOut": null,
                  "duration": 98,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutos().then(res => {\n  expect(res.status).to.equal(200);\n});",
                  "err": {},
                  "uuid": "d0ead3f5-d1b7-44d0-a68c-2801189cbe2a",
                  "parentUUID": "d6532691-6760-4353-9a60-5a7b0065d058",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produto por id e se possui status code 200",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve buscar produto por id e se possui status code 200",
                  "timedOut": null,
                  "duration": 43,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutoPorId(idProduto).then(res => {\n  expect(res.status).to.be.equal(200);\n});",
                  "err": {},
                  "uuid": "ebf0c5f3-55a4-424d-84f7-7a88ab49d542",
                  "parentUUID": "d6532691-6760-4353-9a60-5a7b0065d058",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato sobre a requisição GET /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar contrato sobre a requisição GET /produtos",
                  "timedOut": null,
                  "duration": 82,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutos().then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_produtos\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "77d04ea5-4a72-4042-877b-8436fd2c27d6",
                  "parentUUID": "d6532691-6760-4353-9a60-5a7b0065d058",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato sobre a requisição POST /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar contrato sobre a requisição POST /produtos",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\nlet produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  expect(res.status).to.be.equal(201);\n  cy.validarContrato(res, \"post_produtos\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "72ba5844-1510-4d68-a426-5dd9623ef75b",
                  "parentUUID": "d6532691-6760-4353-9a60-5a7b0065d058",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9376c2ca-8cf0-414c-8f00-20fd9039d93c",
                "d0ead3f5-d1b7-44d0-a68c-2801189cbe2a",
                "ebf0c5f3-55a4-424d-84f7-7a88ab49d542",
                "77d04ea5-4a72-4042-877b-8436fd2c27d6",
                "72ba5844-1510-4d68-a426-5dd9623ef75b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 351,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8586e640-9e98-48d4-87c2-2a590e42781c",
              "title": "Deve efetuar os testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve falhar o cadastro do produto por ser existente, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por ser existente, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 44,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produtoExistente).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"message\").equal(\"Já existe produto com esse nome\");\n});",
                  "err": {},
                  "uuid": "477c9f73-bb9a-4684-93c9-c8247b256872",
                  "parentUUID": "8586e640-9e98-48d4-87c2-2a590e42781c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 52,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemNome = _factory.default.produtoNomeBranco();\ncy.cadastrarProduto(bearer, produtoSemNome).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"nome\").equal(\"nome não pode ficar em branco\");\n});",
                  "err": {},
                  "uuid": "c08d37d8-0e53-499b-a778-1c63558e669d",
                  "parentUUID": "8586e640-9e98-48d4-87c2-2a590e42781c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir descrição, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir descrição, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 47,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemDescricao = _factory.default.produtoSemDescricao();\ncy.cadastrarProduto(bearer, produtoSemDescricao).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"descricao\").equal(\"descricao não pode ficar em branco\");\n});",
                  "err": {},
                  "uuid": "453da96c-1885-4e5d-8bcc-391d1ff8e330",
                  "parentUUID": "8586e640-9e98-48d4-87c2-2a590e42781c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 44,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemNome = _factory.default.produtoSemNome();\ncy.cadastrarProduto(bearer, produtoSemNome).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"nome\").equal(\"nome é obrigatório\");\n});",
                  "err": {},
                  "uuid": "5587706d-6099-41bb-a81b-8119af50ac0e",
                  "parentUUID": "8586e640-9e98-48d4-87c2-2a590e42781c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato negativo sobre a requisição POST /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve validar contrato negativo sobre a requisição POST /produtos",
                  "timedOut": null,
                  "duration": 50,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\nlet produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produtoExistente).then(res => {\n  expect(res.status).to.be.equal(400);\n  cy.validarContrato(res, \"post_produtos\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "5728f5f6-67bf-45b7-9e1c-c7bd87d062df",
                  "parentUUID": "8586e640-9e98-48d4-87c2-2a590e42781c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar teste de inserção de Token inválido",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve realizar teste de inserção de Token inválido",
                  "timedOut": null,
                  "duration": 93,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.invalido).then(res => {\n    bearer = res.body.authorization;\n    cy.cadastrarProduto(bearer, produto).then(res => {\n      expect(res.statusCode === 401);\n      expect(res.body).to.have.property(\"message\");\n      expect(res.body.message).to.be.equal(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\n      cy.validarContrato(res, \"post_produtos\", 401).then(validacao => {\n        expect(validacao).to.be.equal(\"Contrato validado!\");\n      });\n    });\n  });\n});",
                  "err": {},
                  "uuid": "7893bdce-4cee-4583-a0ed-ecd590441302",
                  "parentUUID": "8586e640-9e98-48d4-87c2-2a590e42781c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "477c9f73-bb9a-4684-93c9-c8247b256872",
                "c08d37d8-0e53-499b-a778-1c63558e669d",
                "453da96c-1885-4e5d-8bcc-391d1ff8e330",
                "5587706d-6099-41bb-a81b-8119af50ac0e",
                "5728f5f6-67bf-45b7-9e1c-c7bd87d062df",
                "7893bdce-4cee-4583-a0ed-ecd590441302"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 330,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "aa2bfe9c-13c1-4da8-969b-3a20f6a1b85f",
      "title": "",
      "fullFile": "cypress/integration/api_usuarios.spec.js",
      "file": "cypress/integration/api_usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
          "title": "Testes na rota /usuarios e validações de contrato",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve cadastrar um usuário corretamente",
              "fullTitle": "Testes na rota /usuarios e validações de contrato Deve cadastrar um usuário corretamente",
              "timedOut": null,
              "duration": 87,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = _factory.default.UsuarioBody();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).to.have.property('message').to.be.equal('Cadastro realizado com sucesso');\n  expect(res.body).to.have.property('_id');\n  cy.validarContrato(res, \"post_usuarios\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n  usuarioId = res.body._id;\n});",
              "err": {},
              "uuid": "6167e3af-5b47-43b6-876a-1fd8a0a7f4da",
              "parentUUID": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve dar erro ao cadastrar usuário já cadastrado",
              "fullTitle": "Testes na rota /usuarios e validações de contrato Deve dar erro ao cadastrar usuário já cadastrado",
              "timedOut": null,
              "duration": 50,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = _factory.default.UsuarioExistente();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property('message').to.be.equal('Este email já está sendo usado');\n  cy.validarContrato(res, \"post_usuarios\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {},
              "uuid": "3edc2dc4-c2d5-4310-8e0c-e0dae7063907",
              "parentUUID": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes na rota /usuarios e validações de contrato Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 315,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.listarUsuarios().then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_usuarios\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {},
              "uuid": "1085def4-c480-447d-a74c-3bde39c531db",
              "parentUUID": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar usuário pelo ID",
              "fullTitle": "Testes na rota /usuarios e validações de contrato Deve buscar usuário pelo ID",
              "timedOut": null,
              "duration": 49,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarUsuarioId(usuarioId).then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {},
              "uuid": "d8b5aa17-63bd-4c7f-9db5-ec8de001ad3a",
              "parentUUID": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve dar erro ao buscar usuário por ID",
              "fullTitle": "Testes na rota /usuarios e validações de contrato Deve dar erro ao buscar usuário por ID",
              "timedOut": null,
              "duration": 51,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.buscarUsuarioId().then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property('message').to.be.equal('Usuário não encontrado');\n  cy.validarContrato(res, \"get_usuarios_id\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {},
              "uuid": "1559cd02-d79d-4328-bdc4-96f8c32e598e",
              "parentUUID": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve excluir usuário",
              "fullTitle": "Testes na rota /usuarios e validações de contrato Deve excluir usuário",
              "timedOut": null,
              "duration": 61,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.excluirUsuario(usuarioId).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property('message').equal('Registro excluído com sucesso');\n  cy.validarContrato(res, \"delete_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {},
              "uuid": "4befbaa7-2dea-4915-9e05-1a64fa58e89c",
              "parentUUID": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve dar erro excluir usuário com carrinho cadastrado",
              "fullTitle": "Testes na rota /usuarios e validações de contrato Deve dar erro excluir usuário com carrinho cadastrado",
              "timedOut": null,
              "duration": 189,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.excluirUsuario().then(res => {\n  expect(res.status).to.be.equal(400); //criar usuario com carrinho cadastrado\n  expect(res.body).to.have.property('message').equal('Não é permitido excluir usuário com carrinho cadastrado');\n  expect(res.body).to.have.property('idCarrinho');\n  cy.validarContrato(res, \"delete_usuarios_id\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (http://localhost:56934/__cypress/tests?p=cypress\\integration\\api_usuarios.spec.js:290:32)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "56cbecdd-8f72-430c-9f16-208711be40ca",
              "parentUUID": "edf277a5-0f81-451a-ae23-fc0edfbb1164",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6167e3af-5b47-43b6-876a-1fd8a0a7f4da",
            "3edc2dc4-c2d5-4310-8e0c-e0dae7063907",
            "1085def4-c480-447d-a74c-3bde39c531db",
            "d8b5aa17-63bd-4c7f-9db5-ec8de001ad3a",
            "1559cd02-d79d-4328-bdc4-96f8c32e598e",
            "4befbaa7-2dea-4915-9e05-1a64fa58e89c"
          ],
          "failures": [
            "56cbecdd-8f72-430c-9f16-208711be40ca"
          ],
          "pending": [],
          "skipped": [],
          "duration": 802,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "998e434b-3be8-41be-818d-84ea0edc44b1",
      "title": "",
      "fullFile": "cypress/integration/front_login.spec.js",
      "file": "cypress/integration/front_login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bb987993-ab11-4c6d-a5cd-9932e9593a4a",
          "title": "Testes na rota login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Logar sem a senha",
              "fullTitle": "Testes na rota login Logar sem a senha",
              "timedOut": null,
              "duration": 3901,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.preencherEmail();\n_login.default.clicarBtEntrar();\n_login.default.validarAlerta(\"Password é obrigatório\");",
              "err": {},
              "uuid": "53f80a8e-ca08-4d19-bd7c-9cd30dc4b029",
              "parentUUID": "bb987993-ab11-4c6d-a5cd-9932e9593a4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Logar sem email",
              "fullTitle": "Testes na rota login Logar sem email",
              "timedOut": null,
              "duration": 1141,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.preencherSenha();\n_login.default.clicarBtEntrar();\n_login.default.validarAlerta(\"Email é obrigatório\");",
              "err": {},
              "uuid": "b42346aa-a4ee-423a-86b4-48d04901b5e3",
              "parentUUID": "bb987993-ab11-4c6d-a5cd-9932e9593a4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Logar sem preencher campos",
              "fullTitle": "Testes na rota login Logar sem preencher campos",
              "timedOut": null,
              "duration": 945,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.clicarBtEntrar();\n_login.default.validarAlerta(\"Password é obrigatório\");\n_login.default.validarAlerta(\"Email é obrigatório\");",
              "err": {},
              "uuid": "c04122a5-ce04-4953-bb62-f4cb79ea1e20",
              "parentUUID": "bb987993-ab11-4c6d-a5cd-9932e9593a4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validar componentes /login",
              "fullTitle": "Testes na rota login Validar componentes /login",
              "timedOut": null,
              "duration": 870,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.validarComponentesLogin();",
              "err": {},
              "uuid": "f2d17f2d-2f3b-4069-9c12-fe67293aa1f3",
              "parentUUID": "bb987993-ab11-4c6d-a5cd-9932e9593a4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "53f80a8e-ca08-4d19-bd7c-9cd30dc4b029",
            "b42346aa-a4ee-423a-86b4-48d04901b5e3",
            "c04122a5-ce04-4953-bb62-f4cb79ea1e20",
            "f2d17f2d-2f3b-4069-9c12-fe67293aa1f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6857,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0d56ca90-fde4-4393-b6dd-3c0b0c17622b",
      "title": "",
      "fullFile": "cypress/integration/front_registrando_produto.spec.js",
      "file": "cypress/integration/front_registrando_produto.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7a7b652c-7b3c-4a9b-b805-1e97cc9a9337",
          "title": "Testes na rota cadastro de produto",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cadastrando produto e validando na lista",
              "fullTitle": "Testes na rota cadastro de produto Cadastrando produto e validando na lista",
              "timedOut": null,
              "duration": 5855,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_product.default.cadastrarProdutoAleatório();\n_register_product.default.clicarBtnCadastrar();\n_register_product.default.validarProdutoCriado();",
              "err": {},
              "uuid": "e9cf34cc-11f2-4b9d-9578-d165ed11a889",
              "parentUUID": "7a7b652c-7b3c-4a9b-b805-1e97cc9a9337",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e9cf34cc-11f2-4b9d-9578-d165ed11a889"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5855,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5e3940aa-fe31-4c3f-8736-345c5b6348e6",
      "title": "",
      "fullFile": "cypress/integration/front_registrando_usuarios.spec.js",
      "file": "cypress/integration/front_registrando_usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0161035a-f05f-463a-bcc9-d0ec00476457",
          "title": "Testes na rota cadastro de usuário",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validando URL - mensagem de Cadastro realizado com sucesso e boas vindas",
              "fullTitle": "Testes na rota cadastro de usuário Validando URL - mensagem de Cadastro realizado com sucesso e boas vindas",
              "timedOut": null,
              "duration": 6954,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_user.default.validarMsgCadastroRealizado();\n_register_user.default.validarUrl();\n_register_user.default.validarMsgBoasVindas();\n_register_user.default.validarMsgBoasVindasNome();",
              "err": {},
              "uuid": "8deaae9c-428c-4b64-8548-88a99910b93e",
              "parentUUID": "0161035a-f05f-463a-bcc9-d0ec00476457",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validando Textos dos componentes",
              "fullTitle": "Testes na rota cadastro de usuário Validando Textos dos componentes",
              "timedOut": null,
              "duration": 5886,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_user.default.validandoComponentes();",
              "err": {},
              "uuid": "18248d13-23eb-43b0-98ac-a76f89c3f654",
              "parentUUID": "0161035a-f05f-463a-bcc9-d0ec00476457",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validando se o usuário cadastrado aparece na lista",
              "fullTitle": "Testes na rota cadastro de usuário Validando se o usuário cadastrado aparece na lista",
              "timedOut": null,
              "duration": 5024,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_user.default.acessarListaUser();\n_register_user.default.validaUsuarioCriado();",
              "err": {},
              "uuid": "86fa8455-2478-47df-a0be-75fd2a924646",
              "parentUUID": "0161035a-f05f-463a-bcc9-d0ec00476457",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8deaae9c-428c-4b64-8548-88a99910b93e",
            "18248d13-23eb-43b0-98ac-a76f89c3f654",
            "86fa8455-2478-47df-a0be-75fd2a924646"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17864,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "yyyymmdd_HHMMss",
        "reportTitle": "Relatório dos testes",
        "cdn": true,
        "charts": true
      },
      "version": "6.0.1"
    }
  }
}