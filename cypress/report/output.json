{
  "stats": {
    "suites": 9,
    "tests": 41,
    "passes": 41,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-10T17:46:54.937Z",
    "end": "2021-11-10T17:48:18.672Z",
    "duration": 37864,
    "testsRegistered": 41,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9d689317-5b0e-44e4-8736-1cd7b0aeb7df",
      "title": "",
      "fullFile": "cypress/integration/api_carrinho.spec.js",
      "file": "cypress/integration/api_carrinho.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c3d7a43e-726c-43ea-8815-922e70c05378",
          "title": "Teste da rota /login para execução posterior da rota /carrinhos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar o login com status code 200 e authorization",
              "fullTitle": "Teste da rota /login para execução posterior da rota /carrinhos Deve validar o login com status code 200 e authorization",
              "timedOut": null,
              "duration": 540,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n  });\n});",
              "err": {},
              "uuid": "c75fa446-58af-4a63-835c-bef1aecf0a11",
              "parentUUID": "c3d7a43e-726c-43ea-8815-922e70c05378",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c75fa446-58af-4a63-835c-bef1aecf0a11"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 540,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "00da780a-c40e-4f30-bcb1-cf72ed44c951",
          "title": "Testes na rota /carrinhos e validações de contrato",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve listar carrinhos cadastrados possuindo statys code 200e propriedade 'quantidade' e 'carrinhos'",
              "fullTitle": "Testes na rota /carrinhos e validações de contrato Deve listar carrinhos cadastrados possuindo statys code 200e propriedade 'quantidade' e 'carrinhos'",
              "timedOut": null,
              "duration": 48,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.listarCarrinhos().then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"quantidade\");\n  expect(res.body).to.have.property(\"carrinhos\"); //cy.validarContrato(res, \"get_carrinhos\", 200).then(validacao =>{\n  // expect(validacao).to.be.equal(\"Contrato validado!\")\n  // }) \n});",
              "err": {},
              "uuid": "6ffd0d80-76f9-45ed-ba14-528e4e72ec11",
              "parentUUID": "00da780a-c40e-4f30-bcb1-cf72ed44c951",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6ffd0d80-76f9-45ed-ba14-528e4e72ec11"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 48,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "967bf1c3-550d-4662-a5f3-fb165f62837e",
      "title": "",
      "fullFile": "cypress/integration/api_login.spec.js",
      "file": "cypress/integration/api_login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ade626ba-c121-4ebe-b6b0-2804632485e3",
          "title": "Testes da rota /login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9f332a25-2516-46d7-933a-b7318b101646",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve validar o login com status code 200 e authorization",
                  "fullTitle": "Testes da rota /login Deve efetuar os testes positivos da rota Deve validar o login com status code 200 e authorization",
                  "timedOut": null,
                  "duration": 78,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n    bearer = res.body.authorization;\n  });\n});",
                  "err": {},
                  "uuid": "202567d1-7591-4ae5-9e08-6f33052c2fd5",
                  "parentUUID": "9f332a25-2516-46d7-933a-b7318b101646",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar teste de contrato sobre a requisição POST /login",
                  "fullTitle": "Testes da rota /login Deve efetuar os testes positivos da rota Deve realizar teste de contrato sobre a requisição POST /login",
                  "timedOut": null,
                  "duration": 81,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.be.equal(200);\n    cy.validarContrato(res, \"post_login\", 200).then(validacao => {\n      expect(validacao).to.be.equal(\"Contrato validado!\");\n    });\n  });\n});",
                  "err": {},
                  "uuid": "7808e736-15f6-4c16-afb9-b242e9585671",
                  "parentUUID": "9f332a25-2516-46d7-933a-b7318b101646",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "202567d1-7591-4ae5-9e08-6f33052c2fd5",
                "7808e736-15f6-4c16-afb9-b242e9585671"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 159,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d6951947-4bca-4a49-b1d3-03f5876d0f23",
              "title": "Deve efetuar testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve efetuar uma falha em que o campo email não pode ficar em branco e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo email não pode ficar em branco e status code 400",
                  "timedOut": null,
                  "duration": 50,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.emailEmBranco).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property(\"email\").to.be.equal(\"email não pode ficar em branco\");\n  });\n});",
                  "err": {},
                  "uuid": "718bc0e3-1fcb-4edf-bd11-f16e4ce290b9",
                  "parentUUID": "d6951947-4bca-4a49-b1d3-03f5876d0f23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar uma falha em que o campo email é obrigatório e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo email é obrigatório e status code 400",
                  "timedOut": null,
                  "duration": 45,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.semCampoEmail).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property(\"email\").to.be.equal(\"email é obrigatório\");\n  });\n});",
                  "err": {},
                  "uuid": "1dd64b76-90de-4015-8a44-6c135ccd50a4",
                  "parentUUID": "d6951947-4bca-4a49-b1d3-03f5876d0f23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar uma falha em que o campo senha(password) não pode ficar em branco e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo senha(password) não pode ficar em branco e status code 400",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.senhaEmBranco).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property('password').to.be.equal(\"password não pode ficar em branco\");\n  });\n});",
                  "err": {},
                  "uuid": "9ea2189d-8d78-4fb2-afa6-22435e471e7a",
                  "parentUUID": "d6951947-4bca-4a49-b1d3-03f5876d0f23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar uma falha em que o campo senha(password) é obrigatório e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar uma falha em que o campo senha(password) é obrigatório e status code 400",
                  "timedOut": null,
                  "duration": 46,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.semCampoSenha).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property(\"password\").to.be.equal(\"password é obrigatório\");\n  });\n});",
                  "err": {},
                  "uuid": "fdeda2b3-3a0f-465e-8ced-81541b885927",
                  "parentUUID": "d6951947-4bca-4a49-b1d3-03f5876d0f23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve efetuar falha em que os todos os campos são vazios, e status code 400",
                  "fullTitle": "Testes da rota /login Deve efetuar testes negativos da rota Deve efetuar falha em que os todos os campos são vazios, e status code 400",
                  "timedOut": null,
                  "duration": 44,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.semCampos).then(res => {\n    expect(res.status).to.be.equal(400);\n    expect(res.body).has.property('password').to.be.equal('password é obrigatório');\n    expect(res.body).has.property('email').to.be.equal('email é obrigatório');\n  });\n});",
                  "err": {},
                  "uuid": "f062770b-0b31-4664-a69b-4847114bb900",
                  "parentUUID": "d6951947-4bca-4a49-b1d3-03f5876d0f23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "718bc0e3-1fcb-4edf-bd11-f16e4ce290b9",
                "1dd64b76-90de-4015-8a44-6c135ccd50a4",
                "9ea2189d-8d78-4fb2-afa6-22435e471e7a",
                "fdeda2b3-3a0f-465e-8ced-81541b885927",
                "f062770b-0b31-4664-a69b-4847114bb900"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 234,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d36b9b90-c136-4195-b58f-a6abf19522fe",
      "title": "",
      "fullFile": "cypress/integration/api_produtos.spec.js",
      "file": "cypress/integration/api_produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "42a85fe6-da4d-4a61-878f-ce81274f76ab",
          "title": "Testes da rota /produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ffc8d075-40e1-4804-b52b-74883f647fea",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve validar o login com status code 200 e authorization",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar o login com status code 200 e authorization",
                  "timedOut": null,
                  "duration": 66,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.fixture(\"loginCredentials\").then(user => {\n  cy.logar(user.valido).then(res => {\n    expect(res.status).to.equal(200);\n    expect(res.body).to.have.property(\"authorization\");\n    bearer = res.body.authorization;\n  });\n});",
                  "err": {},
                  "uuid": "d85b67a0-7fea-420c-954c-03ba674aa707",
                  "parentUUID": "ffc8d075-40e1-4804-b52b-74883f647fea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar produto corretamente possuindo status code 201 e exibir propriedade message",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve cadastrar produto corretamente possuindo status code 201 e exibir propriedade message",
                  "timedOut": null,
                  "duration": 50,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).has.property(\"message\").equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property(\"_id\");\n  idProduto = res.body._id;\n});",
                  "err": {},
                  "uuid": "1200d266-2578-437a-9882-dbfec7ef65d2",
                  "parentUUID": "ffc8d075-40e1-4804-b52b-74883f647fea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produtos e se possui status code 200",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve buscar produtos e se possui status code 200",
                  "timedOut": null,
                  "duration": 80,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutos().then(res => {\n  expect(res.status).to.equal(200);\n});",
                  "err": {},
                  "uuid": "456f0839-643b-4d0c-9de9-8313d212ff4f",
                  "parentUUID": "ffc8d075-40e1-4804-b52b-74883f647fea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar produto por id e se possui status code 200",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve buscar produto por id e se possui status code 200",
                  "timedOut": null,
                  "duration": 46,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutoPorId(idProduto).then(res => {\n  expect(res.status).to.be.equal(200);\n});",
                  "err": {},
                  "uuid": "1a0f43f6-f5d1-4316-8888-6e0d2c1718c8",
                  "parentUUID": "ffc8d075-40e1-4804-b52b-74883f647fea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato sobre a requisição GET /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar contrato sobre a requisição GET /produtos",
                  "timedOut": null,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarProdutos().then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_produtos\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "fc5c1dcf-ba3a-4221-b568-199e1dee432f",
                  "parentUUID": "ffc8d075-40e1-4804-b52b-74883f647fea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato sobre a requisição POST /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve validar contrato sobre a requisição POST /produtos",
                  "timedOut": null,
                  "duration": 52,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.cadastrarProduto(bearer, produto).then(res => {\n  expect(res.status).to.be.equal(201);\n  cy.validarContrato(res, \"post_produtos\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "9f01b5b6-03b4-4fc0-a144-caf90a3cb607",
                  "parentUUID": "ffc8d075-40e1-4804-b52b-74883f647fea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar o produto PUT /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes positivos da rota Deve editar o produto PUT /produtos",
                  "timedOut": null,
                  "duration": 58,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.produtoEdit();\ncy.editarProduto(idProduto, body, bearer).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property('message').equal('Registro alterado com sucesso');\n  cy.validarContrato(res, \"put_produtos_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "f7e6abe3-9789-4f68-9dad-402917ad1490",
                  "parentUUID": "ffc8d075-40e1-4804-b52b-74883f647fea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d85b67a0-7fea-420c-954c-03ba674aa707",
                "1200d266-2578-437a-9882-dbfec7ef65d2",
                "456f0839-643b-4d0c-9de9-8313d212ff4f",
                "1a0f43f6-f5d1-4316-8888-6e0d2c1718c8",
                "fc5c1dcf-ba3a-4221-b568-199e1dee432f",
                "9f01b5b6-03b4-4fc0-a144-caf90a3cb607",
                "f7e6abe3-9789-4f68-9dad-402917ad1490"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 436,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "96631344-7233-4767-8886-c8bbbc849ba7",
              "title": "Deve efetuar os testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve falhar o cadastro do produto por ser existente, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por ser existente, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produtoExistente).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"message\").equal(\"Já existe produto com esse nome\");\n});",
                  "err": {},
                  "uuid": "c5e4f1f4-1883-4682-8a58-4e42a37d50e5",
                  "parentUUID": "96631344-7233-4767-8886-c8bbbc849ba7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 45,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemNome = _factory.default.produtoNomeBranco();\ncy.cadastrarProduto(bearer, produtoSemNome).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"nome\").equal(\"nome não pode ficar em branco\");\n});",
                  "err": {},
                  "uuid": "354f4d83-2e9c-41ff-b67d-21e5d61eb79f",
                  "parentUUID": "96631344-7233-4767-8886-c8bbbc849ba7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir descrição, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir descrição, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 46,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemDescricao = _factory.default.produtoSemDescricao();\ncy.cadastrarProduto(bearer, produtoSemDescricao).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"descricao\").equal(\"descricao não pode ficar em branco\");\n});",
                  "err": {},
                  "uuid": "14ab5cd1-8f4c-40a6-afb2-ba2cbaec138b",
                  "parentUUID": "96631344-7233-4767-8886-c8bbbc849ba7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve falhar o cadastro do produto por não possuir nome, possuindo propriedade message e status code 400",
                  "timedOut": null,
                  "duration": 43,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoSemNome = _factory.default.produtoSemNome();\ncy.cadastrarProduto(bearer, produtoSemNome).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).has.property(\"nome\").equal(\"nome é obrigatório\");\n});",
                  "err": {},
                  "uuid": "d1684757-66f2-4da3-a350-459544faf8a7",
                  "parentUUID": "96631344-7233-4767-8886-c8bbbc849ba7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve validar contrato negativo sobre a requisição POST /produtos",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve validar contrato negativo sobre a requisição POST /produtos",
                  "timedOut": null,
                  "duration": 55,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produtoExistente = _factory.default.produtoExistente();\ncy.cadastrarProduto(bearer, produtoExistente).then(res => {\n  expect(res.status).to.be.equal(400);\n  cy.validarContrato(res, \"post_produtos\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "1c60d7e5-dfd7-4cd2-aa55-108920749dae",
                  "parentUUID": "96631344-7233-4767-8886-c8bbbc849ba7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar teste de inserção de Token inválido",
                  "fullTitle": "Testes da rota /produtos Deve efetuar os testes negativos da rota Deve realizar teste de inserção de Token inválido",
                  "timedOut": null,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _factory.default.gerarProduto();\ncy.fixture(\"loginCredentials\").then(usuario => {\n  cy.logar(usuario.invalido).then(res => {\n    bearer = res.body.authorization;\n    cy.cadastrarProduto(bearer, produto).then(res => {\n      expect(res.statusCode === 401);\n      expect(res.body).to.have.property(\"message\");\n      expect(res.body.message).to.be.equal(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\n      cy.validarContrato(res, \"post_produtos\", 401).then(validacao => {\n        expect(validacao).to.be.equal(\"Contrato validado!\");\n      });\n    });\n  });\n});",
                  "err": {},
                  "uuid": "e7592298-4662-4bd4-9c79-1cb26539b730",
                  "parentUUID": "96631344-7233-4767-8886-c8bbbc849ba7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c5e4f1f4-1883-4682-8a58-4e42a37d50e5",
                "354f4d83-2e9c-41ff-b67d-21e5d61eb79f",
                "14ab5cd1-8f4c-40a6-afb2-ba2cbaec138b",
                "d1684757-66f2-4da3-a350-459544faf8a7",
                "1c60d7e5-dfd7-4cd2-aa55-108920749dae",
                "e7592298-4662-4bd4-9c79-1cb26539b730"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 323,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "23592849-2820-4037-8fe3-05a101a8c40b",
      "title": "",
      "fullFile": "cypress/integration/api_usuarios.spec.js",
      "file": "cypress/integration/api_usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b876b0b4-6504-4b9c-a426-a2656cd8d18c",
          "title": "Testes na rota /usuarios e validações de contrato",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e864c6b2-9ab8-47b1-8f58-e91b6d947477",
              "title": "Deve efetuar os testes positivos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar um usuário corretamente, possuindo status code 200 e propriedade '_id'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve cadastrar um usuário corretamente, possuindo status code 200 e propriedade '_id'",
                  "timedOut": null,
                  "duration": 84,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioBody();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property(\"_id\");\n  cy.validarContrato(res, \"post_usuarios\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n  usuarioId = res.body._id;\n});",
                  "err": {},
                  "uuid": "fa2a9c4e-a511-4db9-aaea-14225aec675d",
                  "parentUUID": "e864c6b2-9ab8-47b1-8f58-e91b6d947477",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve listar usuários cadastrados possuindo status code 200",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve listar usuários cadastrados possuindo status code 200",
                  "timedOut": null,
                  "duration": 58,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.listarUsuarios().then(res => {\n  expect(res.status).to.be.equal(200);\n  cy.validarContrato(res, \"get_usuarios\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "0b05d228-8616-4733-aeb6-3af4ab2b36d1",
                  "parentUUID": "e864c6b2-9ab8-47b1-8f58-e91b6d947477",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar usuário pelo ID possuindo status code 200 e propriedade 'nome' e 'email'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve buscar usuário pelo ID possuindo status code 200 e propriedade 'nome' e 'email'",
                  "timedOut": null,
                  "duration": 52,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarUsuarioId(usuarioId).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"nome\");\n  expect(res.body).to.have.property(\"email\");\n  cy.validarContrato(res, \"get_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "2fd672ec-7620-4078-a9d6-9ae4e9106fea",
                  "parentUUID": "e864c6b2-9ab8-47b1-8f58-e91b6d947477",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar usuário possuindo status code 200 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve editar usuário possuindo status code 200 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 51,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.UsuarioEdit();\ncy.editarUsuario(usuarioId, body).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"message\").equal(\"Registro alterado com sucesso\");\n  cy.validarContrato(res, \"put_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "6862be62-bca8-451a-a513-2c98efa4a618",
                  "parentUUID": "e864c6b2-9ab8-47b1-8f58-e91b6d947477",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar usuário caso o mesmo não possua cadastro possindo status code 201, propriedades 'message' e '_id'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve cadastrar usuário caso o mesmo não possua cadastro possindo status code 201, propriedades 'message' e '_id'",
                  "timedOut": null,
                  "duration": 48,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioBody();\nlet body = _factory.default.UsuarioEdit();\ncy.editarUsuario(usuario, body).then(res => {\n  expect(res.status).to.be.equal(201);\n  expect(res.body).to.have.property(\"message\").equal(\"Cadastro realizado com sucesso\");\n  expect(res.body).to.have.property(\"_id\");\n  cy.validarContrato(res, \"put_usuarios_id\", 201).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "d80dd7b9-77b2-43ec-8f83-110ffed99ea5",
                  "parentUUID": "e864c6b2-9ab8-47b1-8f58-e91b6d947477",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir usuário possuindo status code 200 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes positivos da rota Deve excluir usuário possuindo status code 200 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 52,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.excluirUsuario(usuarioId).then(res => {\n  expect(res.status).to.be.equal(200);\n  expect(res.body).to.have.property(\"message\").equal(\"Registro excluído com sucesso\");\n  cy.validarContrato(res, \"delete_usuarios_id\", 200).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "bc6970e3-808d-4599-b526-e8894cfb7eb5",
                  "parentUUID": "e864c6b2-9ab8-47b1-8f58-e91b6d947477",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa2a9c4e-a511-4db9-aaea-14225aec675d",
                "0b05d228-8616-4733-aeb6-3af4ab2b36d1",
                "2fd672ec-7620-4078-a9d6-9ae4e9106fea",
                "6862be62-bca8-451a-a513-2c98efa4a618",
                "d80dd7b9-77b2-43ec-8f83-110ffed99ea5",
                "bc6970e3-808d-4599-b526-e8894cfb7eb5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 345,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "96dc06b3-01b1-4b4b-9ff6-9a79692fbf7c",
              "title": "Deve efetuar os testes negativos da rota",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve dar erro ao tentar cadastrar usuário já cadastrado possuindo status code 400 e propriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao tentar cadastrar usuário já cadastrado possuindo status code 400 e propriedade 'message'",
                  "timedOut": null,
                  "duration": 56,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let usuario = _factory.default.UsuarioExistente();\ncy.cadastrarUsuario(usuario).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Este email já está sendo usado\");\n  cy.validarContrato(res, \"post_usuarios\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "52557f93-106e-43a2-a98f-9a94b0f1dda1",
                  "parentUUID": "96dc06b3-01b1-4b4b-9ff6-9a79692fbf7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve dar erro ao buscar usuário por ID possuindo status code 400 epropriedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao buscar usuário por ID possuindo status code 400 epropriedade 'message'",
                  "timedOut": null,
                  "duration": 50,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.buscarUsuarioId().then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").to.be.equal(\"Usuário não encontrado\");\n  cy.validarContrato(res, \"get_usuarios_id\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "1e8909a6-e669-41e4-87ff-33dc9916dff2",
                  "parentUUID": "96dc06b3-01b1-4b4b-9ff6-9a79692fbf7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve dar erro ao editar usuário com email já cadastrado possuindo status code 400 e prorpiedade 'message'",
                  "fullTitle": "Testes na rota /usuarios e validações de contrato Deve efetuar os testes negativos da rota Deve dar erro ao editar usuário com email já cadastrado possuindo status code 400 e prorpiedade 'message'",
                  "timedOut": null,
                  "duration": 54,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let body = _factory.default.UsuarioExistente();\ncy.editarUsuario(usuarioId, body).then(res => {\n  expect(res.status).to.be.equal(400);\n  expect(res.body).to.have.property(\"message\").equal(\"Este email já está sendo usado\");\n  cy.validarContrato(res, \"put_usuarios_id\", 400).then(validacao => {\n    expect(validacao).to.be.equal(\"Contrato validado!\");\n  });\n});",
                  "err": {},
                  "uuid": "68d33bd8-59fb-4250-83b5-b57cbe075f96",
                  "parentUUID": "96dc06b3-01b1-4b4b-9ff6-9a79692fbf7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52557f93-106e-43a2-a98f-9a94b0f1dda1",
                "1e8909a6-e669-41e4-87ff-33dc9916dff2",
                "68d33bd8-59fb-4250-83b5-b57cbe075f96"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 160,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f95cdfa4-fc0d-43c8-964b-3f09992ee6a4",
      "title": "",
      "fullFile": "cypress/integration/front_listar_produtos.spec.js",
      "file": "cypress/integration/front_listar_produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b6f34896-6058-495d-a9fc-df9de5573209",
          "title": "Testar camada Listar Produto",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Listar produtos e validar url",
              "fullTitle": "Testar camada Listar Produto Listar produtos e validar url",
              "timedOut": null,
              "duration": 3774,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_listar_produtos.default.validarUrl();\n_listar_produtos.default.clicar_botão_listar_produtos();",
              "err": {},
              "uuid": "84ac5b01-1807-4341-b5ab-19ae8d8897e5",
              "parentUUID": "b6f34896-6058-495d-a9fc-df9de5573209",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "84ac5b01-1807-4341-b5ab-19ae8d8897e5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3774,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0fe2e3d2-142b-425b-93e3-98d7f424f46b",
      "title": "",
      "fullFile": "cypress/integration/front_listar_usuarios.spec.js",
      "file": "cypress/integration/front_listar_usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3bab1162-178f-4a4b-b26c-fe39c4713b0e",
          "title": "Teste na camada Listar Usuarios",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Listar Usuarios",
              "fullTitle": "Teste na camada Listar Usuarios Listar Usuarios",
              "timedOut": null,
              "duration": 3296,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_listar_usuarios.default.clicar_botão_listar();\n_listar_usuarios.default.validarUrl();",
              "err": {},
              "uuid": "07ebf32b-16d7-42dc-841d-a3c68dffee81",
              "parentUUID": "3bab1162-178f-4a4b-b26c-fe39c4713b0e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "07ebf32b-16d7-42dc-841d-a3c68dffee81"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3296,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "6e3c07e6-39ed-4f59-8b70-946c55b00114",
      "title": "",
      "fullFile": "cypress/integration/front_login.spec.js",
      "file": "cypress/integration/front_login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d63f0106-0028-41b4-a3a4-6d76fe0b1430",
          "title": "Testes na rota login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Logar sem a senha",
              "fullTitle": "Testes na rota login Logar sem a senha",
              "timedOut": null,
              "duration": 2770,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.preencherEmail();\n_login.default.clicarBtEntrar();\n_login.default.validarAlerta(\"Password é obrigatório\");",
              "err": {},
              "uuid": "2498adef-70a7-4b9b-8962-91b2d00343aa",
              "parentUUID": "d63f0106-0028-41b4-a3a4-6d76fe0b1430",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Logar sem email",
              "fullTitle": "Testes na rota login Logar sem email",
              "timedOut": null,
              "duration": 1134,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.preencherSenha();\n_login.default.clicarBtEntrar();\n_login.default.validarAlerta(\"Email é obrigatório\");",
              "err": {},
              "uuid": "46461d8b-5419-40d3-b81f-c58ed0495bf2",
              "parentUUID": "d63f0106-0028-41b4-a3a4-6d76fe0b1430",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Logar sem preencher campos",
              "fullTitle": "Testes na rota login Logar sem preencher campos",
              "timedOut": null,
              "duration": 945,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.clicarBtEntrar();\n_login.default.validarAlerta(\"Password é obrigatório\");\n_login.default.validarAlerta(\"Email é obrigatório\");",
              "err": {},
              "uuid": "9fbd844e-6982-46da-86a4-662cb8e11617",
              "parentUUID": "d63f0106-0028-41b4-a3a4-6d76fe0b1430",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validar componentes /login",
              "fullTitle": "Testes na rota login Validar componentes /login",
              "timedOut": null,
              "duration": 887,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.validarComponentesLogin();",
              "err": {},
              "uuid": "d5b1efc9-5b66-4206-aabd-54f55370f893",
              "parentUUID": "d63f0106-0028-41b4-a3a4-6d76fe0b1430",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2498adef-70a7-4b9b-8962-91b2d00343aa",
            "46461d8b-5419-40d3-b81f-c58ed0495bf2",
            "9fbd844e-6982-46da-86a4-662cb8e11617",
            "d5b1efc9-5b66-4206-aabd-54f55370f893"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5736,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2d12b5dd-fc43-49a1-846e-5fce65cfaeda",
      "title": "",
      "fullFile": "cypress/integration/front_registrando_produto.spec.js",
      "file": "cypress/integration/front_registrando_produto.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fd0952e5-13c6-4fc2-8cf5-ddaec3995950",
          "title": "Testes na rota cadastro de produto",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cadastrando produto e validando na lista",
              "fullTitle": "Testes na rota cadastro de produto Cadastrando produto e validando na lista",
              "timedOut": null,
              "duration": 4908,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_product.default.cadastrarProdutoAleatório();\n_register_product.default.clicarBtnCadastrar();\n_register_product.default.validarProdutoCriado();",
              "err": {},
              "uuid": "c5ebb6e6-204d-48af-9736-08dfc742ac73",
              "parentUUID": "fd0952e5-13c6-4fc2-8cf5-ddaec3995950",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c5ebb6e6-204d-48af-9736-08dfc742ac73"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4908,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "928c832c-19ea-4fb0-9446-60b65dc7c260",
      "title": "",
      "fullFile": "cypress/integration/front_registrando_usuarios.spec.js",
      "file": "cypress/integration/front_registrando_usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "826077bf-9dbf-4a50-a90e-30b7ec482d7c",
          "title": "Testes na rota cadastro de usuário",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validando URL - mensagem de Cadastro realizado com sucesso e boas vindas",
              "fullTitle": "Testes na rota cadastro de usuário Validando URL - mensagem de Cadastro realizado com sucesso e boas vindas",
              "timedOut": null,
              "duration": 6895,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_user.default.validarMsgCadastroRealizado();\n_register_user.default.validarUrl();\n_register_user.default.validarMsgBoasVindas();\n_register_user.default.validarMsgBoasVindasNome();",
              "err": {},
              "uuid": "b8e98933-58e2-4e8b-b49a-6d45ad69187c",
              "parentUUID": "826077bf-9dbf-4a50-a90e-30b7ec482d7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validando Textos dos componentes",
              "fullTitle": "Testes na rota cadastro de usuário Validando Textos dos componentes",
              "timedOut": null,
              "duration": 6093,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_user.default.validandoComponentes();",
              "err": {},
              "uuid": "077e92c6-e37b-44f3-bb9c-3b02550e0dea",
              "parentUUID": "826077bf-9dbf-4a50-a90e-30b7ec482d7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validando se o usuário cadastrado aparece na lista",
              "fullTitle": "Testes na rota cadastro de usuário Validando se o usuário cadastrado aparece na lista",
              "timedOut": null,
              "duration": 4917,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_register_user.default.acessarListaUser();\n_register_user.default.validaUsuarioCriado();",
              "err": {},
              "uuid": "34b2fea0-f1de-4d8a-b4ce-fc2c6567b8da",
              "parentUUID": "826077bf-9dbf-4a50-a90e-30b7ec482d7c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b8e98933-58e2-4e8b-b49a-6d45ad69187c",
            "077e92c6-e37b-44f3-bb9c-3b02550e0dea",
            "34b2fea0-f1de-4d8a-b4ce-fc2c6567b8da"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17905,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report/mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true,
        "timestamp": "yyyymmdd_HHMMss",
        "reportTitle": "Relatório dos testes",
        "cdn": true,
        "charts": true
      },
      "version": "6.0.1"
    }
  }
}